<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>GitHub Wikis with Gollum</title>
<date>2018-11-09</date>
</info>
<section xml:id="chapter3">
<title>GitHub Wikis with Gollum</title>
<simpara><indexterm>
<primary>GitHub wikis</primary><secondary>id=ix_chapter-03-gollum-asciidoc0</secondary><tertiary>range=startofrange</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-03-gollum-asciidoc0</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm><indexterm>
<primary>Gollum</primary><secondary>GitHub wikis with</secondary><tertiary>id=ix_chapter-03-gollum-asciidoc1</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-03-gollum-asciidoc1</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>Wikis have revolutionized the way we create and digest
information. It turns out that they are a great complement to technical
projects (code repositories) because they allow nontechnical
users to contribute in ways other than adding code. Gollum
is an open source wiki created by GitHub. Just as Git has
revolutionized collaborative editing of code, Gollum wikis layer the
benefits of Git onto the widely used wiki publishing workflow. Gollum
wikis are themselves repositories that generally annotate other
typically code-centric repositories. GitHub makes it easy to associate
a wiki with any
repository.</simpara>
<simpara>In this chapter we&#8217;ll explore the basics of using Gollum, creating a
wiki on GitHub and then learning how to edit it on GitHub and as
a repository on our local machine. We will then create a Gollum wiki by
hand from the command line, and show the bare minimum set of files to
call something a Gollum repository. Finally, we will build a simple
image organization tool that allows us to edit a Gollum wiki in an
entirely different way, but still publishes information into GitHub as
a regular Gollum wiki, exploring a little bit of the internals of Git
along the way.</simpara>
<note>
<simpara>This chapter demonstrates code that modifies a Git repository
programmatically. You will be able to follow along without possessing
a deep understanding of the internals of Git. And, a good supplement
to this chapter (and later chapters as well) is the <a class="orm:hideurl" href="http://shop.oreilly.com/product/0636920022862.do"><em>Version Control
with Git</em></a> book from O&#8217;Reilly.</simpara>
</note>
<section xml:id="_the_story_of_smeagol">
<title>"The Story of Smeagol&#8230;&#8203;"</title>
<simpara><indexterm>
<primary>Gollum</primary><secondary>basics</secondary><tertiary>id=ix_chapter-03-gollum-asciidoc2</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-03-gollum-asciidoc2</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>At its most basic form, a Gollum wiki is a Git repository with a single file,
<emphasis>Home.ext</emphasis> (<emphasis>ext</emphasis> would be any of the supported wiki markup formats,
which we will talk about later).</simpara>
<section xml:id="_repository_linked_wikis">
<title>Repository Linked Wikis</title>
<simpara><indexterm>
<primary>Gollum</primary><secondary>and repository&#8211;linked wikis</secondary>
</indexterm>
<indexterm>
<primary>and repository&#8211;linked wikis</primary>
</indexterm><indexterm>
<primary>repositories</primary><secondary>and associated Gollum wikis</secondary>
</indexterm>
<indexterm>
<primary>and associated Gollum wikis</primary>
</indexterm>Any repository on GitHub, public or private, can have an associated Gollum wiki.
To create a wiki linked to your repository, visit the repository
page and then look in the rightmost colum. You&#8217;ll see an icon that
looks like a book, next to which will be the word "Wiki," as in <xref linkend="integrated_gollum_wiki_in_the_sidebar"/>.</simpara>
<figure xml:id="integrated_gollum_wiki_in_the_sidebar">
<title>Accessing the associated wiki from the sidebar</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/btwg_03in01.png"/>
</imageobject>
<textobject><phrase>btwg 03in01</phrase></textobject>
</mediaobject>
</figure>
<simpara>Clicking this link will bring you to a page where you are asked to
create a wiki for the first time. GitHub will ask you to create the
"Home" page, which is the starting point in a Gollum wiki (<xref linkend="starting_a_gollum_wiki"/>). GitHub will
automatically create a page template with the project name; you can
customize this information to suit your own needs. Clicking "Save Page" will save your first page and create the wiki for you.</simpara>
<figure xml:id="starting_a_gollum_wiki">
<title>Genesis of a new wiki, creating the home page</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/btwg_03in02.png"/>
</imageobject>
<textobject><phrase>btwg 03in02</phrase></textobject>
</mediaobject>
</figure>
<simpara>Your wiki is now as public as your repository is public. Public
repositories have public wikis, accessible to anyone. Private
repositories have private wikis, accessible only to those users or
organizations that have rights to edit the repository data.</simpara>
<simpara>Let&#8217;s review the markup options for Gollum wikis now.</simpara>
</section>
<section xml:id="_markup_and_structure">
<title>Markup and Structure</title>
<simpara><indexterm>
<primary>Gollum</primary><secondary>markup options</secondary><tertiary>id=ix_chapter-03-gollum-asciidoc3</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-03-gollum-asciidoc3</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>Gollum files can be written in any of the supported <indexterm>
<primary>GitHub Markup formats</primary>
</indexterm>"Github Markup" formats, which
include ASCIIdoc, Creole, Markdown, Org Mode, Pod, RDoc,
ReStructuredText, Textile, and MediaWiki. The variety of markup
languages brings flexibility but it can be difficult to know which one
to use. <indexterm>
<primary>Markdown</primary>
</indexterm>Markdown (and its variant cousins) is the most popular markup
language on GitHub, and is well liked on other popular sites like
Stack Overflow. If you are unsure about which language to use, Markdown is a
safe bet because it is ubiquitous across GitHub. <xref linkend="Jekyll"/> has a much deeper overview of Markdown.</simpara>
<simpara role="pagebreak-before">If you do choose Markdown, in addition to the standard vanilla
Markdown language tags, Gollum adds its own set of wiki-specific tags. There
are often subtle (or conflicting) differences from other wiki markup
so it is worth reviewing the
<link xl:href="https://github.com/gollum/gollum/wiki">Gollum repository documentation
page</link>. We&#8217;ll go over the most important ones here.</simpara>
<section xml:id="_links">
<title>Links</title>
<simpara><indexterm>
<primary>Gollum</primary><secondary>link tag</secondary>
</indexterm>
<indexterm>
<primary>link tag</primary>
</indexterm><indexterm>
<primary>HTML</primary>
</indexterm><indexterm>
<primary>links</primary><secondary>Gollum tag</secondary>
</indexterm>
<indexterm>
<primary>Gollum tag</primary>
</indexterm><indexterm>
<primary>Markdown</primary><secondary>link tag</secondary>
</indexterm>
<indexterm>
<primary>link tag</primary>
</indexterm>Links obviously convert into the <literal>&lt;a&gt;</literal> HTML tag. Each format has its
own linking format: in Markdown you use <literal>[text](URL)</literal>. Gollum adds its
own link tag: <literal><anchor xml:id="Link" xreflabel="[Link]"/></literal>.</simpara>
<simpara>In addition:</simpara>
<itemizedlist>
<listitem>
<simpara>You can add a link title using the bar character:
<literal>[[<link xl:href="http://foobar.com|A">http://foobar.com|A</link> link to foobar]]</literal>.</simpara>
</listitem>
<listitem>
<simpara>Links can be either external or internal links.</simpara>
</listitem>
<listitem>
<simpara>A link like <literal>[[Review Images]]</literal> will be converted to a relative link
to the page <emphasis>review-images.ext</emphasis> (where <emphasis>.ext</emphasis> is the preferred
extension you are using with your wiki, most likely Markdown).</simpara>
</listitem>
</itemizedlist>
<simpara>Wikis are generally a collection of pages
linked together in myriad ways, and this assumption about the
structure of links makes writing pages easier.</simpara>
<warning>
<simpara>As we mentioned, there are differences between Gollum wiki tags and other wikis, despite their
having similar syntax. One such example is MediaWiki, where links with
titles use the opposite ordering <literal>[[A link to
foobar|http://foobar.com]]</literal>, so caveat emptor.</simpara>
</warning>
</section>
<section xml:id="_code_snippets">
<title>Code snippets</title>
<simpara><indexterm>
<primary>code snippets</primary>
</indexterm><indexterm>
<primary>Gollum</primary><secondary>code snippets in wikis</secondary>
</indexterm>
<indexterm>
<primary>code snippets in wikis</primary>
</indexterm>Gollum (the wiki) was invented at GitHub, a company dedicated to
improving the lives of software developers, so it stands to reason
Gollum wikis would support insertion of code snippets. To include a snippet of
code, use three backticks, followed by an optional language name, and close
the block of code using three more backticks. If you use the language
name, Gollum will do proper syntax highlighting for most languages:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">```ruby
def hello
  puts "hello"
end
```</programlisting>
<simpara role="pagebreak-before">Gollum
<link xl:href="http://bit.ly/1JMzd4m">at
one point</link> supported inclusion of files from any GitHub repository
(and any branch!) using a syntax like this:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">```ruby:github:xrd/TeddyHyde/blob/master/Gemfile```</programlisting>
<simpara>Unfortunately, this no longer works. According to current documentation
for Gollum, this tag allows inclusion of files from the parent
repository:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">```ruby:/lib/gollum/app.rb```</programlisting>
<simpara>But I found this to be broken as well. At the time of writing,
it tragically appears that there is no way to insert code from the parent
repository (or any other repository) into your wiki content.</simpara>
</section>
<section xml:id="_structural_components">
<title>Structural components</title>
<simpara><indexterm>
<primary>footers, in Gollum wikis</primary>
</indexterm><indexterm>
<primary>Gollum</primary><secondary>adding structural components</secondary>
</indexterm>
<indexterm>
<primary>adding structural components</primary>
</indexterm><indexterm>
<primary>headers</primary><secondary>in Gollum wikis</secondary>
</indexterm>
<indexterm>
<primary>in Gollum wikis</primary>
</indexterm><indexterm>
<primary>sidebars, in Gollum wikis</primary>
</indexterm>Gollum includes capabilities to add sidebars, headers, and footers. If
you include a file called <em>_Sidebar.ext</em> inside your repository,
you&#8217;ll see it as a sidebar for every file rendered. Sidebars are
automatically added to any file and any file from subdirectories that
do not have their own sidebar files. If you wanted to add sidebars
specific to a subdirectory, add another sidebar file in the
subdirectory and this file will override the top-level sidebar file.</simpara>
</section>
<section xml:id="_no_styling_or_javascript">
<title>No styling or JavaScript</title>
<simpara><indexterm>
<primary>CSS</primary><secondary>Gollum limitations with</secondary>
</indexterm>
<indexterm>
<primary>Gollum limitations with</primary>
</indexterm><indexterm>
<primary>Gollum</primary><secondary>styling limitations</secondary>
</indexterm>
<indexterm>
<primary>styling limitations</primary>
</indexterm><indexterm>
<primary>JavaScript</primary><secondary>Gollum limitations with</secondary>
</indexterm>
<indexterm>
<primary>Gollum limitations with</primary>
</indexterm>For security reasons, Gollum strips out all CSS and
JavaScript from raw markup files. You can include your own JavaScript
or CSS file when running Gollum from the command line
(discussed momentarily) using the <literal>--custom-css</literal> or
<literal>--custom-js</literal> switches, but there is no way to include these files on a
wiki when your Gollum wiki is hosted on GitHub.</simpara>
</section>
<section xml:id="_inserting_images">
<title>Inserting images</title>
<simpara><indexterm>
<primary>Gollum</primary><secondary>inserting images</secondary>
</indexterm>
<indexterm>
<primary>inserting images</primary>
</indexterm><indexterm>
<primary>images</primary><secondary>Gollum tag format for</secondary>
</indexterm>
<indexterm>
<primary>Gollum tag format for</primary>
</indexterm>Images are inserted into your document using the same tag format
&amp;#x5b;&amp;#x5b;ceo.png&amp;#x5d;&amp;#x5d;: this adds the correct HTML tags to include an image
named <emphasis>ceo.png</emphasis> inside your page. This basic syntax is often extended
for additional funtionality. For example, to add a frame
and an alt tag, you could use syntax like <literal>[[ceo.png|frame|alt=Our CEO
relaxing on the beach]]</literal>. This creates the proper HTML tags for the
same image, and also adds a frame and alt text (helpful for better
context and the extra information is used by screenreaders for
visually impaired users as well).  Review the documentation on the
Gollum repository for more details about the breadth of the image
options.</simpara>
<simpara>You can also add images using the editor on GitHub. But you&#8217;ll notice
that either way you are adding a link to an image and that there is no
way to upload images into GitHub from the editor (<xref linkend="no_image_upload_only_image_urls"/>).</simpara>
<figure xml:id="no_image_upload_only_image_urls">
<title>No image upload, only image URLs</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/btwg_03in03.png"/>
</imageobject>
<textobject><phrase>btwg 03in03</phrase></textobject>
</mediaobject>
</figure>
<simpara>For nontechnical users, this makes Gollum wikis on GitHub almost
unusable if they need to add images. Let&#8217;s address this problem by
building our own customized image-centric Gollum editor that still
interoperates with regular Gollum wikis. We can put this editor in
front of nontechnical users, allowing them to add images, and then
publish the wiki into GitHub as is<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-03-gollum-asciidoc3</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-03-gollum-asciidoc3</primary>
</indexterm>.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-03-gollum-asciidoc2</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-03-gollum-asciidoc2</primary>
</indexterm></simpara>
</section>
</section>
</section>
<section xml:id="_hacking_gollum">
<title>Hacking Gollum</title>
<simpara><indexterm>
<primary>images</primary><secondary>Gollum&#8211;based editor for</secondary><tertiary>id=ix_chapter-03-gollum-asciidoc4</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-03-gollum-asciidoc4</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>Would <indexterm>
<primary>Gollum</primary><secondary>as hackable wiki</secondary>
</indexterm>
<indexterm>
<primary>as hackable wiki</primary>
</indexterm>an image editor based on Gollum be of general use? On many
software teams there is tension between the design
team and the software team stemming from the fact that designers
generally don&#8217;t like using source-code tools to manage images. This
causes issues when software developers rely on designs that are
rapidly changing: coders quickly get out of sync with the latest
designs. As a wiki, Gollum is the perfect tool to bridge this gap
between designers and coders: wikis are easy to read and modify by
nontechnical users. Since Gollum is a hackable wiki, we can build our
own workflow tool that allows designers to manage images and coders to
easily see those changes in a source-code repository.</simpara>
<simpara>This will be a dual-purpose repository. We can use the repository with
Gollum as a standard wiki, and we can use it with our application to
enter data in a more powerful way than Gollum permits from its default
interface. The data will still be compatible with Gollum and will be
hosted on GitHub.</simpara>
<simpara><indexterm>
<primary>Ruby</primary><secondary>gem installation</secondary>
</indexterm>
<indexterm>
<primary>gem installation</primary>
</indexterm>To begin, install the Gollum Ruby gem and then initialize our repository:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ gem install gollum
$ mkdir images
$ cd images
$ git init .
$ printf "### Our home" &gt; Home.md
$ git add Home.md
$ git commit -m "Initial commit"</programlisting>
<simpara>We&#8217;ve just created a wiki compatible with Gollum. Let&#8217;s see what it
looks like inside Gollum. Run the <literal>gollum</literal> command then open
<emphasis><link xl:href="http://localhost:4567/">http://localhost:4567/</link></emphasis> in your browser, as shown in <xref linkend="gollum_running_locally"/>.</simpara>
<figure xml:id="gollum_running_locally">
<title>Viewing the wiki home page running on our laptop</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/btwg_03in04.png"/>
</imageobject>
<textobject><phrase>btwg 03in04</phrase></textobject>
</mediaobject>
</figure>
<simpara>As you can see, this tiny set of commands was enough to create the
basics of the Gollum wiki structure.</simpara>
<warning>
<simpara><indexterm>
<primary>command line</primary><secondary>editing Gollum from</secondary>
</indexterm>
<indexterm>
<primary>editing Gollum from</primary>
</indexterm>If you edit a Gollum wiki from the command line, be aware that Gollum
only looks inside the repository data for files. If you have added
something to the working directory or have not yet commited files in
your index, they will not be visible to Gollum.</simpara>
</warning>
<simpara>Now let&#8217;s begin creating the web app that will help us store images
inside a Gollum wiki.</simpara>
</section>
<section xml:id="_the_starting_point_of_a_gollum_editor">
<title>The Starting Point of a Gollum Editor</title>
<simpara><indexterm>
<primary>Gollum</primary><secondary>image editor construction</secondary>
</indexterm>
<indexterm>
<primary>image editor construction</primary>
</indexterm>Now we will create our custom editor. <indexterm>
<primary>Sinatra</primary><secondary>for Gollum image editor construction</secondary>
</indexterm>
<indexterm>
<primary>for Gollum image editor construction</primary>
</indexterm>We&#8217;ll use Sinatra, a Ruby
library that provides a simple DSL (domain-specific language) for
building web applications. First, create a file called <emphasis>image.rb</emphasis> and
put the following contents inside it:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'sinatra'
require 'gollum-lib'
wiki = Gollum::Wiki.new(".")
get '/pages' do
  "All pages: \n" + wiki.pages.collect { |p| p.path }.join( "\n" )
end</programlisting>
<simpara>Then, create the Gemfile, install the dependencies, and run the web
application:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ echo "source 'https://rubygems.org'
gem 'sinatra', '1.4.5'
gem 'gollum-lib', '4.1.0'" &gt;&gt; Gemfile
$ bundle install
Fetching gem metadata from https://rubygems.org/..........
Resolving dependencies...
Installing charlock_holmes (0.7.3)
Using diff-lcs (1.2.5)
Installing github-markup (1.3.3)
Using mime-types (1.25.1)
...
$ bundle exec ruby image.rb
$ open http://localhost:4567/pages</programlisting>
<simpara>We specify at least the minimum 4.1.0 for <literal>gollum-lib</literal> as the interface
and list of supporting libraries has changed. We then run within the
bundler context (using gems installed from this Gemfile rather than
system gems) using the <literal>bundle exec ruby image.rb</literal> command.</simpara>
<simpara>You&#8217;ll see a report of the files that exist in our Gollum wiki right
now. We&#8217;ve only added one file, the <emphasis>Home.md</emphasis> file.</simpara>
</section>
<section xml:id="_programmatically_handling_images">
<title>Programmatically Handling Images</title>
<simpara><indexterm>
<primary>Gollum</primary><secondary>programmatically handling images</secondary><tertiary>id=ix_chapter-03-gollum-asciidoc5</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-03-gollum-asciidoc5</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm><indexterm>
<primary>images</primary><secondary>handling programmatically</secondary><tertiary>id=ix_chapter-03-gollum-asciidoc6</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-03-gollum-asciidoc6</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>Let&#8217;s add to our server. We want to support<indexterm>
<primary>uploading ZIP files</primary>
</indexterm> uploading ZIP files into our system that we will then unpack and add to our repository, as well as add a list of these files to our wiki. Modify our <emphasis>image.rb</emphasis> script to look like this:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'sinatra'
require 'gollum-lib'
require 'tempfile'
require 'zip'
require 'rugged'

def index( message=nil )
  response = File.read(File.join('.', 'index.html'))
  response.gsub!( "&lt;!-- message --&gt;\n",
  "&lt;h2&gt;Received and unpacked #{message}&lt;/h2&gt;" ) if message
  response
end

wiki = Gollum::Wiki.new(".")
get '/' do
  index()
end

post '/unpack' do
  @repo = Rugged::Repository.new('.')
  @index = Rugged::Index.new

  zip = params[:zip][:tempfile]
  Zip::Zip.open( zip ) { |zipfile|
    zipfile.each do |f|
      contents = zipfile.read( f.name )
      filename = f.name.split( File::SEPARATOR ).pop
      if contents and filename and filename =~ /(png|jp?g|gif)$/i
        puts "Writing out: #{filename}"
      end
    end
  }
  index( params[:zip][:filename] )
end</programlisting>
<simpara>We&#8217;ll need an <emphasis>index.html</emphasis> file as well, so add that:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">&lt;html&gt;
&lt;body&gt;
&lt;!-- message --&gt;
&lt;form method='POST' enctype='multipart/form-data' action='/unpack'&gt;
Choose a zip file:
&lt;input type='file' name='zip'/&gt;
&lt;input type='submit' name='submit'&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
<simpara>This server script receives a POST request at the <literal>/unpack</literal> mount point and
retrieves a ZIP file from the parameters passed into the script. It
then opens the ZIP file (stored as a temp file on the server side),
iterates over each file in the ZIP, strips the full path from the
filename, and then prints out that filename (if it looks like an image)
to our console. Regardless of whether we are accessing the
root of our server, or have just posted to the <literal>/unpack</literal> mount point,
we always need to render our index page. When we do render it after
unzipping, we replace a comment stored in the index file with a status
message indicating the script received the correct file we posted.</simpara>
<simpara><indexterm>
<primary>RubyZip</primary>
</indexterm><indexterm>
<primary>Rugged library</primary>
</indexterm>We need to add the new Ruby libraries (RubyZip and Rugged) to our Gemfile:
update the required gems using the following commands, and then rerun
our Sinatra server script:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ echo "gem 'rubyzip', '1.1.7'
gem 'rugged', '0.23.2'" &gt;&gt; Gemfile
$ bundle install
$ bundle exec ruby image.rb</programlisting>
<warning>
<simpara>Rugged requires the libgit2 libraries (the pure C libraries for accessing
Git repositories). Rugged gives you access to modification of Git
repositories in the elegance of the Ruby language but with the speed
of C. However, as this library is based on libgit2, and libgit2
requires a C compiler, you will need to install this toolset first to
install Rugged. On OS X this can look like <literal>brew install cmake</literal> or
<literal>apt-get install cmake</literal> for Linux.</simpara>
</warning>
<simpara>Then, we can open <emphasis><link xl:href="http://localhost:4567/">http://localhost:4567/</link></emphasis> and test uploading a ZIP file
full of images. You&#8217;ll see output similar to this in your console
after uploading a ZIP file:</simpara>
<programlisting language="bash" linenumbering="unnumbered">...
[2014-05-07 10:08:49] INFO  WEBrick 1.3.1
[2014-05-07 10:08:49] INFO  ruby 2.0.0 (2013-05-14)
[x86_64-darwin13.0.0]
== Sinatra/1.4.5 has taken the stage on 4567 for development with
backup from WEBrick
[2014-05-07 10:08:49] INFO  WEBrick::HTTPServer#start: pid=46370
port=4567
Writing out: IMG1234.png
Writing out: IMG5678.png
Writing out: IMG5678.png
...</programlisting>
<simpara>We are not doing anything beyond printing out the names of the images
in the ZIP. We&#8217;ll actually insert them into our Git repository in the
next section.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-03-gollum-asciidoc6</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-03-gollum-asciidoc6</primary>
</indexterm><indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-03-gollum-asciidoc5</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-03-gollum-asciidoc5</primary>
</indexterm></simpara>
</section>
<section xml:id="_using_the_rugged_library">
<title>Using the Rugged Library</title>
<simpara><indexterm>
<primary>Gollum</primary><secondary>Rugged library for adding files to wiki</secondary><tertiary>id=ix_chapter-03-gollum-asciidoc7</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-03-gollum-asciidoc7</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm><indexterm>
<primary>Rugged library</primary><secondary>id=ix_chapter-03-gollum-asciidoc8</secondary><tertiary>range=startofrange</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-03-gollum-asciidoc8</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>Our end goal for this script is to add files to our Gollum wiki, which
means adding files to the repository that backs our Gollum wiki.
The Rugged library handles the grunt work of this type of task easily.
<indexterm>
<primary>Grit</primary><secondary>Rugged as successor to</secondary>
</indexterm>
<indexterm>
<primary>Rugged as successor to</primary>
</indexterm>Rugged is the successor to the original Ruby library for Git (called
Grit). Gollum, at the time of writing, uses the Grit libraries,
which also provide a binding to the libgit2 library, a "portable, pure
C implementation of the Git core methods." Grit has been abandoned
(though there are unofficial maintainers) and the Gollum team intends
to use Rugged as the long-term library backing Gollum. Rugged is
written in Ruby and (provided you like Ruby) is a more
elegant way to interface with a Git repository than raw Git
commands. As you might expect, Rugged is maintained by several employees of GitHub.</simpara>
<simpara>To change our script to modify our Git repository, let&#8217;s change our
script to no longer print the filename (using the <literal>puts</literal> method inside
the ZIP decode block) and instead call a new method called
<literal>write_file_to_repo</literal>. And, at the end of the ZIP block, add a method
<indexterm>
<primary>build&#95;commit() method</primary>
</indexterm>called <literal>build_commit</literal>, which builds the commit from our new files. Our
new file (omitting the unchanged code at the head of the file) looks
like this:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">post '/unpack' do
  @repo = Rugged::Repository.new('.')
  @index = Rugged::Index.new

  zip = params[:zip][:tempfile]
  Zip::Zip.open( zip ) { |zipfile|
    zipfile.each do |f|
      contents = zipfile.read( f.name )
      filename = f.name.split( File::SEPARATOR ).pop
      if contents and filename and filename =~ /(png|jp?g|gif)$/i
        write_file_to_repo contents, filename # Write the file
      end
    end
    build_commit() # Build a commit from the new files
  }
  index( params[:zip][:filename] )
end

def get_credentials
  contents = File.read File.join( ENV['HOME'], ".gitconfig" )
  @email = $1 if contents =~ /email = (.+)$/
  @name = $1 if contents =~ /name = (.+)$/
end

def build_commit
  get_credentials()
  options = {}
  options[:tree] = @index.write_tree(@repo)
  options[:author] = { :email =&gt; @email, :name =&gt; @name, :time =&gt; Time.now }
  options[:committer] = { :email =&gt; @email, :name =&gt; @name, :time =&gt; Time.now }
  options[:message] ||= "Adding new images"
  options[:parents] = @repo.empty? ? [] : [ @repo.head.target ].compact
  options[:update_ref] = 'HEAD'

  Rugged::Commit.create(@repo, options)

end

def write_file_to_repo( contents, filename )
  oid = @repo.write( contents, :blob )
  @index.add(:path =&gt; filename, :oid =&gt; oid, :mode =&gt; 0100644)
end</programlisting>
<simpara>As you can see from the code, Rugged handles a lot of the grunt
work required when creating a commit inside a Git repository. Rugged has a
simple interface to creating a blob inside your Git repository
(<literal>write</literal>), and adding files to the index (the <literal>add</literal> method), and
also has a simple and clean interface to build the tree object
(<literal>write_tree</literal>) and then build the commit (<literal>Rugged::Commit.create</literal>).</simpara>
<simpara>To ease the burden of hardcoding our commit credentials, we implement
a method called<indexterm>
<primary>get&#95;credentials method</primary>
</indexterm> <literal>get_credentials</literal> that loads up your credentials from a file called <emphasis>.gitconfig</emphasis> located in your home directory. You
probably have this if you have used Git for anything at all on your machine, but if this
file is missing, this method will fail. On my machine this file looks
like the following code snippet. The <literal>get_credentials</literal> method simply loads up this
file and parses it for the name and email address. If you wanted to
load the credentials using another method, or even hardcode them, you
can just modify this method to suit your needs. The instance variables
<literal>@email</literal> and <literal>@name</literal> are then used in the <literal>build_commit()</literal> method:</simpara>
<programlisting language="ini" linenumbering="unnumbered">[user]
        name = Chris Dawson
        email = xrdawson@gmail.com
[credential]
        helper = cache --timeout=3600
...</programlisting>
<simpara>Let&#8217;s verify
that things are working correctly after uploading a ZIP file. Jumping
into a terminal window after uploading a new file, imagine running
these commands:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git status</programlisting>
<simpara>To our surprise, we will see something like this:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD &lt;file&gt;..." to unstage)

  deleted:    images/3190a7759f7f668.../IMG_20120825_164703.jpg
  deleted:    images/3190a7759f7f668.../IMG_20130704_151522.jpg
  deleted:    images/3190a7759f7f668.../IMG_20130704_174217.jpg</programlisting>
<simpara>We just added those files; why is Git reporting them as deleted?</simpara>
<simpara>To understand why this happens, remember that in Git there are three
places files can reside: the working directory, the staging
area or index, and the repository itself. Your working directory is
the set of local files you are working on. The <literal>git status</literal>
command describes itself as "show the working tree status." Rugged
operates on the repository itself, and the Rugged calls in the preceding code operated
on the index and then built a commit. This is important to note
because our files will not exist in our working directory if we only
write them using the Rugged calls, and if we do this, we cannot
reference them inside our wiki page when we are running Gollum
locally. We&#8217;ll fix this in the next section.</simpara>
<simpara>We&#8217;ve now added the files to our repository, but we have not exposed
these files inside our wiki. Let&#8217;s modify our server script to write
out each file to a wiki page for review. As we mentioned in the
previous section, we need to make sure we write the files to both
the working index and the repository (using the Rugged library <literal>write</literal>
call). Then we can generate a Review file that details all the images
uploaded.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-03-gollum-asciidoc8</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-03-gollum-asciidoc8</primary>
</indexterm><indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-03-gollum-asciidoc7</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-03-gollum-asciidoc7</primary>
</indexterm></simpara>
</section>
<section xml:id="_adding_images_to_a_review_file">
<title>Adding Images to a Review File</title>
<simpara>Now that we have successfully unzipped and processed the images, we can add them to a file
for review. We will call this file <literal>Review.md</literal>. The code to write the
review file looks like this:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">def write_review_file( files, dir )
   review_filename = "Review.md"
   contents = "## Review Images\n\n"
   files.each do |f|
      contents += "### #{f} \n[[#{dir}/#{f}]]\n\n"
   end

  File.write review_filename, contents
  oid = @repo.write( contents, :blob )
  @index.add(:path =&gt; review_filename, :oid =&gt; oid, :mode =&gt; 0100644)
end</programlisting>
<simpara>The method is straightforward: we pass in the list of files and a
subdirectory where we wrote out the image files to disk. Then, we generate
a Markdown file with a header (using the two hash formatting characters) stating
"Review Images," and then iterate over the list of images, entering the filename
as a subheader. We then use the Gollum image markup tag (two braces, then the image
filename, then closing with two more braces). We write out the file to disk. Finally, we add the file to the repository and then to the index. The commit that
we built for the images will include this review file as well, since it is added to the index
before the images are processed—as long as we place the call to <literal>write_review_file</literal> before the
call to <literal>build_commit</literal> like so:</simpara>
<programlisting language="ruby" linenumbering="unnumbered"> ...
  write_review_file files, dir # write out a review file
  build_commit() # Build a commit from the new files
 ...</programlisting>
<simpara>Now, let&#8217;s take a look at how images are stored inside our repository, particularly if the same image
is uploaded twice.</simpara>
</section>
<section xml:id="_optimizing_for_image_storage">
<title>Optimizing for Image Storage</title>
<simpara><indexterm>
<primary>Gollum</primary><secondary>optimizing for image storage</secondary><tertiary>id=ix_chapter-03-gollum-asciidoc9</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-03-gollum-asciidoc9</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm><indexterm>
<primary>images</primary><secondary>optimizing repository for storage of</secondary><tertiary>id=ix_chapter-03-gollum-asciidoc10</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-03-gollum-asciidoc10</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>If a designer uploads the same image twice, what happens? Our code
writes the uploaded image to a path on disk that is based on
the parent SHA hash of the repository (and this means we will always
write the file to a different path, even when the file is the same as
a previous uploaded file). It would look to
an untrained eye like we are adding the file multiple times.
However, the nature of Git permits us to add the same file
multiple times without incurring any additional storage cost beyond
the first addition (and the minimal cost of a tree structure). When a file is added to a Git repository, an SHA hash
is generated from the file contents. For example, generating the SHA hash
from an empty file will always return the same SHA hash:<footnote><simpara>This is explained beautifully in the blog <link xl:href="http://alblue.bandlem.com/2011/08/git-tip-of-week-objects.html">http://alblue.bandlem.com/2011/08/git-tip-of-week-objects.html</link>.</simpara></footnote></simpara>
<programlisting language="bash" linenumbering="unnumbered">$ echo -en "blob 0\0" | shasum
e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
$ printf '' | git hash-object -w --stdin
e69de29bb2d1d6434b8b29ae775ad8c2e48c5391</programlisting>
<simpara>Adding a ZIP file with a bunch of files where only one
or two differs from the prior ZIP file means that Git will properly
reference the same file multiple times. Unfortunately, GitHub does not provide
an interface for reviewing the statistics of wikis in the same way
they do for regular repositories. We can, however, review our
repository size from within the local repository by running the
count-objects Git subcommand. As an example, I uploaded a ZIP file
with two images inside of it. I then use the
count-objects command and see this:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git gc
...
$ git count-objects -v
count: 0
size: 0
in-pack: 11
packs: 1
size-pack: 2029
prune-packable: 0
garbage: 0
size-garbage: 0</programlisting>
<simpara>Inspecting the first ZIP file, I see these statistics about it:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip -l ~/Downloads/Photos\ \(4\).zip
Archive:  /Users/xrdawson/Downloads/Photos (4).zip
  Length     Date   Time    Name
 --------    ----   ----    ----
  1189130  01-01-12 00:00   IMG_20130704_151522.jpg
   889061  01-01-12 00:00   IMG_20130704_174217.jpg
 --------                   -------
  2078191                   2 files</programlisting>
<simpara>Now let&#8217;s use another ZIP file with the same two files present but
with an additional image file added:</simpara>
<programlisting language="bash" linenumbering="unnumbered">unzip -l ~/Downloads/Photos\ \(5\).zip
Archive:  /Users/xrdawson/Downloads/Photos (5).zip
  Length     Date   Time    Name
 --------    ----   ----    ----
  1189130  01-01-12 00:00   IMG_20130704_151522.jpg
   566713  01-01-12 00:00   IMG_20120825_164703.jpg
   889061  01-01-12 00:00   IMG_20130704_174217.jpg
 --------                   -------
  2644904                   3 files</programlisting>
<simpara>Then, I upload the second ZIP file. If I rerun the count-objects
command (after running <literal>git gc</literal>, a command that packs files
efficiently and makes our output more human readable), I see this:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git gc
...
$ git count-objects -v
count: 0
size: 0
in-pack: 17
packs: 1
size-pack: 2578
prune-packable: 0
garbage: 0
size-garbage: 0</programlisting>
<simpara>Notice that our packed size has only changed by about half a MB, which
is the compressed size of the additional third file, but more
importantly, there was no impact from the other two files on our
repository size, even though they were added at different paths.</simpara>
<simpara>If we upload the secondary file yet again, we will regenerate and
commit a new version of the <emphasis>Review.md</emphasis> file, but no new files will
need to be created inside our Git repository object store from the
images directory (even though their paths have changed), so our
impact on the repository will be minimal:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git gc
...
$ git count-objects -v
count: 0
size: 0
in-pack: 21
packs: 1
size-pack: 2578
prune-packable: 0
garbage: 0
size-garbage: 0</programlisting>
<simpara>As you can see, our packed size has barely changed, an indication that
the only changes were a new Git tree object and commit object. We
still have the files located in our repository at a variety of
paths so our review pages will work no matter what revision we are accessing:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ find images
images
images/7507409915d00ad33d03c78af0a4004797eec4b4
images/7507409915d00ad33d03c78af0a4004797eec4b4/IMG_20120825_164703.jpg
images/7507409915d00ad33d03c78af0a4004797eec4b4/IMG_20130704_151522.jpg
images/7507409915d00ad33d03c78af0a4004797eec4b4/IMG_20130704_174217.jpg
images/7f9505a4bafe8c8f654e22ea3fd4dab8b4075f75
images/7f9505a4bafe8c8f654e22ea3fd4dab8b4075f75/IMG_20120825_164703.jpg
images/7f9505a4bafe8c8f654e22ea3fd4dab8b4075f75/IMG_20130704_151522.jpg
images/7f9505a4bafe8c8f654e22ea3fd4dab8b4075f75/IMG_20130704_174217.jpg
images/b4be28e5b24bfa46c4942d756a3a07efd24bc234
images/b4be28e5b24bfa46c4942d756a3a07efd24bc234/IMG_20130704_151522.jpg
images/b4be28e5b24bfa46c4942d756a3a07efd24bc234/IMG_20130704_174217.jpg</programlisting>
<simpara>Git and Gollum can efficiently store the same file at different paths
without overloading the repository.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-03-gollum-asciidoc10</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-03-gollum-asciidoc10</primary>
</indexterm><indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-03-gollum-asciidoc9</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-03-gollum-asciidoc9</primary>
</indexterm></simpara>
</section>
<section xml:id="_reviewing_on_github">
<title>Reviewing on GitHub</title>
<simpara><indexterm>
<primary>Gollum</primary><secondary>reviewing wiki on GitHub</secondary><tertiary>id=ix_chapter-03-gollum-asciidoc11</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-03-gollum-asciidoc11</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>The raison d&#8217;etre for this wiki is to annotate a development project.
If you follow the instructions and create a new wiki for a
repository, you&#8217;ll then be able to push up the changes we&#8217;ve made
using our image.rb script. Once you have created a new wiki, look
for a box on the right that says "Clone this wiki locally," as seen in <xref linkend="gollum_git_clone_url"/>.</simpara>
<figure xml:id="gollum_git_clone_url">
<title>Getting the clone URL for our wiki</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/btwg_03in05.png"/>
</imageobject>
<textobject><phrase>btwg 03in05</phrase></textobject>
</mediaobject>
</figure>
<simpara>Copy that link, and then enter a terminal window where we can then add a remote
URL to our local repository that allows us to synchronize our
repositories and publish our images into GitHub. Gollum wikis have a
simple URL structure based on the original clone URL: just add the
word <literal>.wiki</literal> to the end of the clone URL (but before the final <literal>.git</literal>
extension). So, if the original clone URL of the repository is
<literal>git@github.com:xrd/webiphany.com.git</literal> our clone URL for the
associated wiki will be <literal>git@github.com:xrd/webiphany.com.wiki.git</literal>.
Once we have the URL, we can add it as a remote to our local
repository using the following commands:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git remote add origin git@github.com:xrd/webiphany.com.wiki.git
$ git pull # This will require us to merge the changes...
$ git push</programlisting>
<simpara>When we pull, we will be asked to merge our changes since GitHub
created a <emphasis>Home.md</emphasis> file that did not exist in our local repository.
We can just accept the merge as is. The <literal>git push</literal> publishes our
changes. If we then visit the wiki, we&#8217;ll see an additional file
listed under the pages sidebar to the right. Clicking the Review
page, as in <xref linkend="images_displayed_within_a_gollum_wiki"/>, we can see the images we&#8217;ve added most recently.</simpara>
<figure xml:id="images_displayed_within_a_gollum_wiki">
<title>An image review page</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/btwg_03in06.png"/>
</imageobject>
<textobject><phrase>btwg 03in06</phrase></textobject>
</mediaobject>
</figure>
<simpara>Not sure why our designer is providing us with an image of a couch,
but I am sure he has his reasons.</simpara>
<simpara>Once we have published the file, we can click the Review link in the
sidebar to see the most current version of the Review page. We also
can review the revisions of this file by clicking the "3 Commits"
(or whatever number of commits have occurred with this file)
link right underneath the page title. Jumping onto that page shows us
the full history of this file, as shown in <xref linkend="a_view_on_the_revisions_from_within_github"/>.</simpara>
<figure xml:id="a_view_on_the_revisions_from_within_github">
<title>Wiki history review via the Commit Log</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/btwg_03in07.png"/>
</imageobject>
<textobject><phrase>btwg 03in07</phrase></textobject>
</mediaobject>
</figure>
<simpara>Clicking any of the SHA hashes will display the page at that
revision in our history and show us the state of the document at any given
moment in history. Unfortunately, jumping back and forth between
revisions requires two clicks, one from the Review page to the list of
revisions, and then another click to jump into the revision we want,
but this permits us to review changes between the comps provided from
our designer.</simpara>
<simpara>It would be nice if GitHub provided a simple way to jump
from a revision to the parent (older) revision, but it doesn&#8217;t expose
this in its site at this point. We can fix this, however, by generating
our own special link inside the Review page itself, which will
magically know how to navigate to a previous version of the page.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-03-gollum-asciidoc11</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-03-gollum-asciidoc11</primary>
</indexterm></simpara>
</section>
<section xml:id="_improving_revision_navigation">
<title>Improving Revision Navigation</title>
<simpara><indexterm>
<primary>Gollum</primary><secondary>improving revision navigation</secondary>
</indexterm>
<indexterm>
<primary>improving revision navigation</primary>
</indexterm><indexterm>
<primary>revisions, improving navigation of</primary>
</indexterm>In our example, we only have three revisions right now, and all share the same commit
message ("Adding new images"). This is not very descriptive and makes
it challenging to understand the differences between revisions, which is
critical when we are trying to understand how things have changed
between comps. We can improve this easily.</simpara>
<simpara>First, let&#8217;s add a commit message field to our upload form:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;html&gt;
&lt;body&gt;
&lt;!-- message --&gt;
&lt;form method='POST' enctype='multipart/form-data' action='/unpack'&gt;
Choose a zip file:
&lt;input type='file' name='zip'/&gt;
&lt;input type='text' name='message' placeholder='Enter commit message'/&gt;
&lt;input type='submit' name='submit'&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
<simpara>Then, let&#8217;s adjust the commit message inside our <emphasis>image.rb</emphasis> script,
which is a one-line change to the options hash, setting the value of
it to the parameter we are now passing in for commit:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">  ...
options[:committer] = { :email =&gt; @email, :name =&gt; @name, :time =&gt; Time.now }
options[:message] = params[:message]
options[:parents] = @repo.empty? ? [] : [ @repo.head.target ].compact
  ...</programlisting>
<simpara>Now, if our designer posts a new version of the UI comps, they can
specify what changes were made, and we have a record of that in our
change log, which is exposed on the revisions section of our wiki hosted on GitHub.</simpara>
</section>
<section xml:id="_fixing_linking_between_comp_pages">
<title>Fixing Linking Between Comp Pages</title>
<simpara><indexterm>
<primary>comp pages, fixing linking between</primary>
</indexterm><indexterm>
<primary>Gollum</primary><secondary>fixing linking between comp pages</secondary>
</indexterm>
<indexterm>
<primary>fixing linking between comp pages</primary>
</indexterm>As noted, there is no quick way to jump between comps once we are
inside a review revision. However, if you recall we used the parent
SHA hash to build out our image links. We can use this to build out a
navigation links inside our comp page when we are on a revision page while
viewing the history.</simpara>
<simpara>Again, it is a simple change: one line within the<indexterm>
<primary>write&#95;review&#95;file method</primary>
</indexterm> <literal>write_review_file</literal>
method. After the block that creates each link to the image files,
add a line that builds a link to the parent document
via its SHA hash using the parent SHA found in our Rugged object under
<literal>@repo.head.target</literal>. This link will allow us to navigate to prior
revisions in our history:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">  ...
files.each do |f|
  contents += "### #{f} \n[[#{dir}/#{f}]]\n\n"
end
contents += "[Prior revision (only when viewing history)]" +
"(#{@repo.head.target})\n\n"

File.write review_filename, contents
oid = @repo.write( contents, :blob )
@index.add(:path =&gt; review_filename, :oid =&gt; oid, :mode =&gt; 0100644)
  ...</programlisting>
<simpara>Now, when we view the Review file history, we see a link to each prior
version. Is it possible to provide a link to the next version in our
history? Unfortunately, we have no way to predict the SHA hash of the
next commit made to the repository, so we cannot build this link
inside our <emphasis>Review.md</emphasis> file with our Ruby script. However, we do get
something just as good for free because we can simply use the back
button to jump back to the prior page in the history stack of our
browser. We might try to get clever
and use a link with JavaScript to call window.history.back() but
Gollum will foil this attempt by stripping JavaScript from rendered
markup files. This is generally a good thing, as we don&#8217;t want to
permit rogue markup inside our wiki pages, but it does limit our
options in this situation.</simpara>
<simpara>Unfortunately, these links do not work when you are viewing the review file itself
(clicking them brings you to a page that asks you to create this
as a new page). <indexterm>
<primary>Liquid tags</primary>
</indexterm>Gollum, unlike Jekyll, does not support Liquid
tags, which would permit building a link using the username and
repository. Right now we don&#8217;t have access to these variables, so our
link needs to be relative, which works when we are in history review,
but not in the normal review. It does not affect viewing the files so
this would require educating your stakeholders on the limitations of
this link.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-03-gollum-asciidoc4</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-03-gollum-asciidoc4</primary>
</indexterm></simpara>
</section>
<section xml:id="_summary">
<title>Summary</title>
<simpara>In this chapter we learned how to create a Gollum wiki from
scratch, both on GitHub and as a fresh repository from the command
line. We then looked at the different ways to use the Gollum command-line tool and learned why this is a nice option when we want to run
our own Gollum server. Finally, we built a customized Gollum
image-centric editor using the Rugged and Sinatra Ruby libraries.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-03-gollum-asciidoc1</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-03-gollum-asciidoc1</primary>
</indexterm><indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-03-gollum-asciidoc0</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-03-gollum-asciidoc0</primary>
</indexterm></simpara>
<simpara>In the next chapter we&#8217;ll switch gears completely and build a GUI
application for searching GitHub issues. And we&#8217;ll do it in Python.</simpara>
</section>
</section>
</article>