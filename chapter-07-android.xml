<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Android and the Git Data API</title>
<date>2018-11-09</date>
</info>
<section xml:id="android_and_git_data_api">
<title>Android and the Git Data API</title>
<simpara><indexterm>
<primary>Android</primary><secondary>id=ix_chapter-07-android-asciidoc0</secondary><tertiary>range=startofrange</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc0</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm><indexterm>
<primary>Android</primary><secondary>and Git Data API</secondary><tertiary>id=ix_chapter-07-android-asciidoc1</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc1</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>You might not use your phone right now as a developer tool, but the
odds are that you will soon. At the moment, phones and tablets can be
great for reading code, but the editors we developers use on our
laptops have not yet been reimagined for mobile devices. We are
getting close though: the GitHub API is accessible through the well-written EGit client library for Java, and this library supports both reading
data stored on GitHub and writing data back into it. These are a
perfect set of building blocks to develop applications for the Android
platform, currently the world&#8217;s most popular mobile OS.</simpara>
<simpara>In this chapter, we&#8217;ll use the Java EGit libraries to develop a small
Android application that posts to our blog hosted on GitHub. Our
blogging application will allow us to log in to GitHub, and then ask us
for a quick note describing how we are feeling. The application will
then compose a Jekyll blog post for us and push the post into our blog
on GitHub.</simpara>
<section xml:id="_setting_up">
<title>Setting Up</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>setup for</secondary><tertiary>id=ix_chapter-07-android-asciidoc2</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc2</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>To build this application, we need to create a Jekyll blog and then
install the necessary Android build tools.</simpara>
<section xml:id="_creating_a_jekyll_blog">
<title>Creating a Jekyll Blog</title>
<simpara><indexterm>
<primary>Jekyll blogs</primary><secondary>for Android app</secondary>
</indexterm>
<indexterm>
<primary>for Android app</primary>
</indexterm>We are writing an application that adds Jekyll blog entries, and we
are writing tests to verify our application works as advertisted, so
we need a sandbox blog against which we can run commands. There are
various ways to create a new Jekyll blog. The simplest is to run a
series of Ruby commands documented here; if you want to know more
about Jekyll, it is covered in more depth in <xref linkend="Jekyll"/>.
There are a few items of note when establishing a Jekyll blog that
have some complexity, things like mapping a hostname properly and using the
correct branch inside Git. For our purposes here, however, we won&#8217;t need
to make sure all that is established. All we need is to make sure
we have a sandbox repository that has the structure of a Jekyll blog:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ echo "source 'https://rubygems.org'" &gt;&gt; Gemfile
$ echo "gem 'github-pages'" &gt;&gt; Gemfile
$ echo "gem 'hub'" &gt;&gt; Gemfile
$ export BLOG_NAME=mytestblog
$ bundle
$ jekyll new $BLOG_NAME
$ cd $BLOG_NAME
$ hub create
$ git push -u origin master</programlisting>
<simpara>These commands install the correct libraries for using Jekyll (and one
for our tests as well), generate a new blog using the Jekyll command-line tool, and then create a blog on GitHub with those files. On the
second line we specify the name of the blog; you are welcome to change
this to any name you&#8217;d like, just make sure the tests match the name.</simpara>
<warning>
<simpara>When you have finished running these commands, you should close the
terminal window. There are other commands later in this chapter that
should occur in a fresh directory and as such it is best not to run
those commands from within the same directory where you created your
Jekyll blog. You&#8217;ve pushed all those files into GitHub, so you could
safely delete the local repository in this directory.</simpara>
</warning>
</section>
<section xml:id="_android_development_tools">
<title>Android Development Tools</title>
<simpara><indexterm>
<primary>Android</primary><secondary>development tools for</secondary>
</indexterm>
<indexterm>
<primary>development tools for</primary>
</indexterm>If you don&#8217;t have a physical Android device, don&#8217;t fret. You can follow
along with this chapter without having an actual Android device by doing
development and testing on a virtual device.</simpara>
<section xml:id="_installing_the_java_sdk">
<title>Installing the Java SDK</title>
<simpara><indexterm>
<primary>Android</primary><secondary>Java SDK installation</secondary>
</indexterm>
<indexterm>
<primary>Java SDK installation</primary>
</indexterm><indexterm>
<primary>Java</primary><secondary>SDK installation</secondary>
</indexterm>
<indexterm>
<primary>SDK installation</primary>
</indexterm>Unfortunately there is no simple shell command to install Java in the
same way as there is for Ruby and NodeJS using RVM or NVM.
Oracle controls the Java language and distribution of official SDKs,
and it restricts access to downloads other than from <a class="orm:hideurl" href="http://java.oracle.com"><em>java.oracle.com</em></a>.
Java is freely available, but you need to visit <a class="orm:hideurl" href="http://java.oracle.com"><em>java.oracle.com</em></a> and
find the correct download for your needs. Android works with the 1.7
versions of Java or better.</simpara>
</section>
<section xml:id="_installing_android_studio">
<title>Installing Android Studio</title>
<simpara><indexterm>
<primary>Android</primary><secondary>Android Studio installation</secondary>
</indexterm>
<indexterm>
<primary>Android Studio installation</primary>
</indexterm>We will use Android Studio, the Google IDE for developing Android
applications. To install it, go to
<link xl:href="https://developer.android.com/sdk/index.html">https://developer.android.com/sdk/index.html</link> and you will see a
download button for your platform (OS X, Linux, and Windows
supported). Android Studio bundles all the important tools for
building Android applications.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc2</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc2</primary>
</indexterm></simpara>
</section>
</section>
</section>
<section xml:id="_creating_a_new_project">
<title>Creating a New Project</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>creating new project</secondary><tertiary>id=ix_chapter-07-android-asciidoc3</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc3</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>Let&#8217;s now create our Android project. <indexterm>
<primary>Android Studio</primary>
</indexterm>When you first open Android
Studio, you will see an option in the right pane inviting you to
create a new project. Click the "Start a new Android Studio
project" option. In the next step, you will see a screen for
configuring your new project. Enter GhRU ("GitHub R U?") into the
Application Name and use <emphasis>example.com</emphasis> as the Company Domain (or use
your own domain, but be aware that this will make the directory structure
presented in this chapter different than yours). Android Studio should
automatically generate the "package name" for you as
<literal>com.example.ghru</literal>.</simpara>
<simpara>You will then need to choose a<indexterm>
<primary>SDK (software development kit)</primary>
</indexterm><indexterm>
<primary>target SDK</primary>
</indexterm> target SDK. The higher the target,
the better access to newer Android APIs, but the fewer number of
devices that can run the application. The code in this chapter will
work with older SDKs, so let&#8217;s make a balanced choice and use Android
4.4 (KitKat), which runs on phones and tablets. At the moment this means,
according to Android Studio, that our application will run on 49.5% of
Android devices in the world as shown in <xref linkend="choose-android-sdk"/>.</simpara>
<figure xml:id="choose-android-sdk">
<title>Choose an Android SDK</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/btwg_07in01.png"/>
</imageobject>
<textobject><phrase>btwg 07in01</phrase></textobject>
</mediaobject>
</figure>
<simpara>You will then be presented with a choice of activities. Choose "Blank
Activity." You will be taken to a screen that allows you to customize
the activity. Accept the defaults of "MainActivity" as the Activity
Name and the associated files for the layout, title, and menu resource
name. Then click the "Finish" button to generate the project.</simpara>
<simpara>After completing these steps, Android Studio will create Gradle
configuration files and generate the structure of your
application. Once this has completed, you can review the file tree of
your project by clicking the lefthand vertical tab labeled
"Project" as shown in <xref linkend="reviewing-android-project-structure"/>.</simpara>
<figure xml:id="reviewing-android-project-structure">
<title>Reviewing the Android project structure for the first time</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/btwg_07in02.png"/>
</imageobject>
<textobject><phrase>btwg 07in02</phrase></textobject>
</mediaobject>
</figure>
<simpara>If you have never seen an Android project before, this screen deserves
some explanation. The <emphasis>app</emphasis> directory contains your application code and
resources (layout files, images, and strings). Inside the <emphasis>app</emphasis>
directory you will see several other directories: The <emphasis>java</emphasis> directory
contains, quite obviously, any Java code for the project, which
includes the application files, and also programs that do not reside
in the app when it is published to the app store but perform testing
on the app. The <emphasis>res</emphasis> directory contains the resources we
mentioned. Android Studio lists all build files under the Gradle
Scripts section, and groups them regardless of their directory
placement. You can see two <emphasis>build.gradle</emphasis> files, the first of which
you can generally ignore, though the second we will need to adjust.</simpara>
<simpara>Now we are ready to start editing our project.</simpara>
<section xml:id="_editing_the_gradle_build_file">
<title>Editing the Gradle Build File</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>Gradle build file editing</secondary><tertiary>id=ix_chapter-07-android-asciidoc4</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc4</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm><indexterm>
<primary>Gradle</primary><secondary>id=ix_chapter-07-android-asciidoc5</secondary><tertiary>range=startofrange</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc5</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>First, we need to add to our Gradle build file and specify the
dependent libraries. Gradle is a build system for Java and has become
the offical build system for the Android platform. Open the <emphasis>build.gradle</emphasis> within the <literal>app</literal> module (the second of the two
<emphasis>build.gradle</emphasis> files):</simpara>
<programlisting language="groovy" linenumbering="unnumbered">apply plugin: 'com.android.application' //  <co xml:id="CO1-1"/>

android {
    compileSdkVersion 23 //  <co xml:id="CO1-2"/>
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.example.ghru"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner
            "android.support.test.runner.AndroidJUnitRunner" //  <co xml:id="CO1-3"/>
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
            'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar']) //  <co xml:id="CO1-4"/>
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5'
    compile( 'commons-codec:commons-codec:1.9' )
    testCompile 'junit:junit:4.12' //  <co xml:id="CO1-5"/>
    testCompile 'com.squareup.okhttp:okhttp:2.5.0'
    androidTestCompile 'com.android.support.test:runner:0.4' //  <co xml:id="CO1-6"/>
    androidTestCompile 'com.android.support.test:rules:0.4'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
}</programlisting>
<calloutlist>
<callout arearefs="CO1-1">
<para>First, we load the Android gradle plug-in. This extends our project
to allow an <literal>android</literal> block, which we specify next.</para>
</callout>
<callout arearefs="CO1-2">
<para>Next, we configure our android block, with things like the target
version (which we choose when setting up our project) and the actual
SDK, which we are using to compile the application.</para>
</callout>
<callout arearefs="CO1-3">
<para>In order to run UI tests, we need to specify a test runner
called the <code>AndroidJ<span class="keep-together">Unit</span>Runner</code>.</para>
</callout>
<callout arearefs="CO1-4">
<para>Android Studio automatically adds a configuration to our build
file that loads any JARS (Java libraries) from the <emphasis>lib</emphasis>
directory. We also install the support compatibility library for older
Android devices, and most importantly, the EGit library that manages
connections to GitHub for us. The commons CODEC library from the
Apache Foundation provides tools that help to encode content into
Base64, one of the options for storing data inside a GitHub repository
using the API.</para>
</callout>
<callout arearefs="CO1-5">
<para>Next, we install libraries that are only used when we run unit
tests. <literal>testCompile</literal> libraries are compiled only when the code is run
on the local development machine, and for this situation we need the
<indexterm>
<primary>JUnit library</primary>
</indexterm><indexterm>
<primary>OkHttp library</primary>
</indexterm>JUnit library, and the OkHttp library from Square, which helps us
validate that our request for a new commit has made it all the way
into the GitHub API.</para>
</callout>
<callout arearefs="CO1-6">
<para>Lastly, we install the Espresso libraries, the Google UI testing
framework. The first line (of the three libraries) installs the test
runner we configured earlier. We use <literal>androidTestCompile</literal>, which
compiles against these libraries when the code runs on Android in test
mode.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc5</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc5</primary>
</indexterm><indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc4</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc4</primary>
</indexterm></para>
</callout>
</calloutlist>
<section xml:id="_creating_avds_for_development">
<title>Creating AVDs for development</title>
<simpara><indexterm>
<primary>Android Virtual Devices (AVDs)</primary>
</indexterm>Android Studio makes creating AVD (Android Virtual Devices) simple. To
start, under the &#x201c;Tools&#x201d; menu, click &#x201c;Android&#x201d; and then select
&#x201c;AVD Manager.&#x201d; To create a new AVD, click the &#x201c;Create Virtual
Device&#x201d; button and follow the prompts. You are generally free to
choose whatever settings you like. Google produces a real device
called the Nexus 5. This is the Android reference device, and is a
good option for a generic device with good support across all
features. You can choose this one if you are confused about which to
use as shown in <xref linkend="creating-new-avd"/>.</simpara>
<figure xml:id="creating-new-avd">
<title>Creating a new AVD</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/btwg_07in03.png"/>
</imageobject>
<textobject><phrase>btwg 07in03</phrase></textobject>
</mediaobject>
</figure>
<simpara>Once you have created an AVD, start it up. It will take a few minutes
to boot; AVDs emulate the chipset in software and
booting up can take a few minutes, unfortunately. There are
alternative tools that speed up AVD boot time (Genymotion is one of
those), but there are complexities if you stray away from the stock
Android tools, so we will stick with AVD.</simpara>
</section>
</section>
<section xml:id="_default_android_main">
<title>Default Android Main</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>default main for</secondary><tertiary>id=ix_chapter-07-android-asciidoc6</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc6</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>When we use the preceding commands to create a new Android application, it
creates a sample entry point that is the starting point of our
Android application. <indexterm>
<primary>AndroidManifest.xml file</primary>
</indexterm>All Android applications have a file called
<emphasis>AndroidManifest.xml</emphasis>, which specifies this activity and also supplies
a list of permissions to the apps. Open the <emphasis>AndroidManifest.xml</emphasis> file
from within the <emphasis>app/src/main</emphasis> directory. We need to make one change: to
add a line that specifies that this app will use the Internet
permission (required if our app will be talking to the GitHub
API). Note that when viewing this file inside Android Studio the IDE
can interpolate strings from resources, so you might see the
<literal>android:label</literal> attribute displayed as GhRU with a grey tinge, when
in fact the XML file itself has the value displayed here (<literal>@string/app_name</literal>):</simpara>
<programlisting language="java" linenumbering="unnumbered">&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
  package="com.example.ghru"&gt;

    &lt;uses-permission android:name="android.permission.INTERNET" /&gt;

    &lt;application android:allowBackup="true" android:label="@string/app_name"
        android:icon="@mipmap/ic_launcher" android:supportsRtl="true"
        android:theme="@style/AppTheme"&gt;

        &lt;activity android:name="MainActivity"
            android:label="@string/app_name"&gt;
            &lt;intent-filter&gt;
                &lt;action android:name="android.intent.action.MAIN" /&gt;
                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;

    &lt;/application&gt;

&lt;/manifest&gt;</programlisting>
<simpara>When the application is launched, the Android OS will launch this
activity and then call the <literal>onCreate</literal> function for us. Inside this
function, our application calls our parent&#8217;s implementation of
<literal>onCreate</literal>, and then inflates the layout for our application. Layouts
are XML files in which the UI of an Android application is
declaratively described.</simpara>
<simpara>Android Studio created a default layout for us (called
<emphasis>activity_main.xml</emphasis>), but let&#8217;s ignore that and create our own
layout. To do so, right-click (Ctrl-click on OS X) on the <emphasis>layouts</emphasis>
directory, and then choose "New" and then "Layout resource file" at
the very top of the list (Android Studio nicely chooses the most
likely candidate given the context of the click). Enter "main.xml" as
the filename, and accept the other defaults.</simpara>
<simpara>This application requires that we log in, so we know we at least need a field and a
descriptive label for the username, a password field (and associated
descriptive label) for the password, a button to click that tells our
app to attempt to log in, and a status field that indicates success or
failure of the login. So, let&#8217;s modify the generated <emphasis>main.xml</emphasis> to
specify this user interface. To edit this file as text, click the
tab labeled Text next to the tab labeled Design at the very bottom
of the <emphasis>main.xml</emphasis> pane to switch to text view. Then, edit the file to
look like the following:</simpara>
<pre data-type="programlisting" data-code-language="java">&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;-- <a class="co" id="aco_android_and_the_git_data_api_CO2-1" href="#acallout_android_and_the_git_data_api_CO2-1"><img src="callouts/1.png" alt="1"/></a> --&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    &gt;  &lt;-- <a class="co" id="aco_android_and_the_git_data_api_CO2-2" href="#acallout_android_and_the_git_data_api_CO2-2"><img src="callouts/2.png" alt="2"/></a> --&gt;
&lt;TextView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:text="GitHub Username:"
    /&gt;
&lt;EditText
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@+id/username"
    /&gt;

&lt;TextView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:text="GitHub Password:"
    /&gt;

&lt;EditText
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@+id/password"
    android:inputType="textWebPassword"
    /&gt;  &lt;-- <a class="co" id="aco_android_and_the_git_data_api_CO2-3" href="#acallout_android_and_the_git_data_api_CO2-3"><img src="callouts/3.png" alt="3"/></a> --&gt;

&lt;Button
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:text="Login"
    android:id="@+id/login"
    /&gt;  &lt;-- <a class="co" id="aco_android_and_the_git_data_api_CO2-4" href="#acallout_android_and_the_git_data_api_CO2-4"><img src="callouts/4.png" alt="4"/></a> --&gt;

&lt;TextView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@+id/login_status"
    /&gt;

&lt;/LinearLayout&gt;</pre>

<p>You may have complicated feelings about XML files (I know I do), but
the Android layout XML files are a straightforward way to design
layouts declaratively, and there is a great ecosystem of GUI tools
that provide sophisticated ways to manage them. Scanning this XML
file, it should be relatively easy to understand what is
happening here.</p>

<dl class="calloutlist">
<dt><a class="co" id="acallout_android_and_the_git_data_api_CO2-1" href="#aco_android_and_the_git_data_api_CO2-1"><img src="callouts/1.png" alt="1"/></a></dt>
<dd><p>The entire layout is wrapped in a <code>LinearLayout</code>, which simply
positions each element stacked vertically inside it. We set the
height and width layout attributes to <code>match_parent</code>, which means this
layout occupies the entire space of the screen.</p></dd>
<dt><a class="co" id="acallout_android_and_the_git_data_api_CO2-2" href="#aco_android_and_the_git_data_api_CO2-2"><img src="callouts/2.png" alt="2"/></a></dt>
<dd><p>We then add the elements we described previously: pairs of <code>TextView</code>
and <code>EditView</code> for the label and entry options necessary for the
username and password.</p></dd>
<dt><a class="co" id="acallout_android_and_the_git_data_api_CO2-3" href="#aco_android_and_the_git_data_api_CO2-3"><img src="callouts/3.png" alt="3"/></a></dt>
<dd><p>The password field customizes the type to be a password field,
which means the entry is hidden when we enter it.</p></dd>
<dt><a class="co" id="acallout_android_and_the_git_data_api_CO2-4" href="#aco_android_and_the_git_data_api_CO2-4"><img src="callouts/4.png" alt="4"/></a></dt>
<dd><p>Some elements in the XML have an ID attribute, which allows us to
access the items within our Java code, such as when we need to assign
a handler to a button or retrieve text entered by the user from an
entry field. We will demonstrate this in a moment.</p></dd>
</dl>
<simpara>You can review the visual structure of this XML file by clicking
the "Design" tab to switch back to design mode.</simpara>
<simpara>We also need a layout once we have logged in. Create a file called
<emphasis>logged_in.xml</emphasis> using the same set of steps. Once
logged in, the user is presented with a layout asking him to choose
which repository to save into, to enter his blog post into
a large text field, and then to click a button to submit that blog
post. We also leave an empty status box beneath the button to
provide context while saving the post:</simpara>
<programlisting language="java" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    &gt;
  &lt;TextView
      android:layout_width="match_parent"
      android:layout_height="wrap_content"
      android:text="Logged into GitHub"
      android:layout_weight="0"
      android:id="@+id/status" /&gt;

  &lt;EditText
      android:layout_width="match_parent"
      android:layout_height="wrap_content"
      android:hint="Enter the blog repository"
      android:id="@+id/repository"
      android:layout_weight="0"
      /&gt;

    &lt;EditText
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter the blog title"
        android:id="@+id/title"
        android:layout_weight="0" /&gt;

    &lt;EditText
      android:gravity="top"
      android:layout_width="match_parent"
      android:layout_height="match_parent"
      android:hint="Enter your blog post"
      android:id="@+id/post"
      android:layout_weight="1"
      /&gt;

  &lt;Button
      android:layout_width="match_parent"
      android:layout_height="wrap_content"
      android:layout_weight="0"
      android:id="@+id/submit"
      android:text="Send blog post"/&gt;

&lt;/LinearLayout&gt;</programlisting>
<simpara>Most of this should be familiar once you have reviewed the <emphasis>main.xml</emphasis>
file (and be sure to copy this from the associated sample repository
on GitHub if you don&#8217;t want to copy it in yourself).<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc6</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc6</primary>
</indexterm></simpara>
<simpara>Now that we have our XML established, we can ready our application for
testing.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc3</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc3</primary>
</indexterm></simpara>
</section>
</section>
<section xml:id="_android_automated_testing">
<title>Android Automated Testing</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>automated testing for</secondary><tertiary>id=ix_chapter-07-android-asciidoc7</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc7</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm><indexterm>
<primary>testing</primary><secondary>Android app</secondary><tertiary>id=ix_chapter-07-android-asciidoc8</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc8</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>Android supports three types of tests: unit tests, integration tests,
and user interface (UI) tests. Unit tests validate very tightly
defined and isolated pieces of code, while <indexterm>
<primary>integration tests</primary>
</indexterm>integration tests and UI tests test
larger pieces of the whole. On Android, integration tests generally
mean instantiation of data managers or code that interacts with
multiple components inside the app, while UI testing permits testing
of user-facing elements like buttons or text fields.
In this chapter we will create a unit test and a UI test.</simpara>
<simpara>One important note: Unit tests run on your development machine, not the Android
device itself. UI tests run on the Android device (or emulator). There
can be subtle differences between the Java interpreter running on your development
machine and the Dalvik interpreter running on your Android device, so
it is worthwhile to use a mixture of the three types of tests. Stated
another way, write at least one test that runs on the device or
emulator itself!</simpara>
<section xml:id="_unit_tests_for_our_github_client">
<title>Unit Tests for Our GitHub Client</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>unit tests for</secondary><tertiary>id=ix_chapter-07-android-asciidoc9</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc9</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm><indexterm>
<primary>unit tests</primary><secondary>id=ix_chapter-07-android-asciidoc10</secondary><tertiary>range=startofrange</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc10</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>Let&#8217;s start by defining a unit test. Since the unit test runs on our
development machine, our test and implementation code should be
written such that they do not need to load any Android classes. This
forces us to constrain functionality to only the GitHub API. We will
define a helper class that will handle all the interaction with the
GitHub API but does not know about Android whatsoever. Then, we can
write a test harness that takes that class, instantiates it, and
validates our calls to GitHub produce the right results.</simpara>
<note>
<simpara>You might legitimately ask: is a unit test the right place to verify
an API call? Will this type of test be fast, given that slow-running
unit tests are quickly ignored by software developers? Would it be
better to mock out the response data inside our unit tests? These are
all good questions!</simpara>
</note>
<simpara>To set up unit tests, we need to switch the build variant to unit
tests. Look for a vertical tab on the lefthand side of Android
Studio. Click this, and then where it says "Test Artifact" switch
to "Unit Tests." From the project view (click the "Project" vertical tab if
project view is not already selected) you can expand the "java"
directory, and you should then see a directory with "(test)" in
parentheses indicating this is where tests go. If this directory is
not there, create a directory using the command line (this command
would work: <literal>mkdir -p app/src/test/java/com/example/ghru</literal>).</simpara>
<simpara>Then, create a test file called <emphasis>GitHubHelperTest.java</emphasis> that looks like the following:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.ghru;

import com.squareup.okhttp.OkHttpClient; //  <co xml:id="CO2-1"/>
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Response;

import org.junit.Test; //  <co xml:id="CO2-2"/>

import java.util.Date;

import static org.junit.Assert.assertTrue;

/**
 * To work on unit tests, switch the Test Artifact in the Build Variants view.
 */
public class GitHubHelperTest { //  <co xml:id="CO2-3"/>
    @Test
    public void testClient() throws Exception {

        String login = System.getenv("GITHUB_HELPER_USERNAME"); //  <co xml:id="CO2-4"/>
        String password = System.getenv("GITHUB_HELPER_PASSWORD");
        String repoName = login + ".github.io";

        int randomNumber = (int)(Math.random() * 10000000);
        String randomString = String.valueOf( randomNumber );
        String randomAndDate = randomString + " " +
	  (new Date()).toString() ; //  <co xml:id="CO2-5"/>

        GitHubHelper ghh = new GitHubHelper( login, password ); //  <co xml:id="CO2-6"/>
        ghh.SaveFile(repoName,
             "Some random title",
             "Some random body text",
             randomAndDate );

        Thread.sleep(3000); //  <co xml:id="CO2-7"/>

        String url = "https://api.github.com/repos/" +  //  <co xml:id="CO2-8"/>
        login + "/" + repoName + "/events";
        OkHttpClient ok = new OkHttpClient();
        Request request = new Request.Builder()
                .url( url )
                .build();
        Response response = ok.newCall( request ).execute();
        String body = response.body().string();

        assertTrue( "Body does not have: " + randomAndDate,   //  <co xml:id="CO2-9"/>
            body.contains( randomAndDate ) );
    }

}</programlisting>
<calloutlist>
<callout arearefs="CO2-1">
<para>First, we import the OkHttp library, a library for making HTTP
calls. We will verify that our GitHub API calls made it all the way into
GitHub by looking at the event log for our repository, a log
accessible via HTTP.</para>
</callout>
<callout arearefs="CO2-2">
<para>Next, we import JUnit, which provides us with an annotation
<literal>@Test</literal> we can use to indicate to a test runner that certain methods
are test functions (and should be executed as tests when in test mode).</para>
</callout>
<callout arearefs="CO2-3">
<para>We create a class called <literal>GitHubHelperTest</literal>. In it, we define a
sole test case <literal>testClient</literal>. We use the <literal>@Test</literal> annotation to indicate
to JUnit that this is a test case.</para>
</callout>
<callout arearefs="CO2-4">
<para>Now we specify our login information and the repository we want to
test against. In order to keep the password out of our source code, we
use an environment variable we can specify when we run the
tests.</para>
</callout>
<callout arearefs="CO2-5">
<para>Next, we build a random string. This unique string will be our
commit message, a beacon that allows us to verify that our commit made it
all the way through and was stored on GitHub, and to differentiate it from
other commits made recently by other tests.</para>
</callout>
<callout arearefs="CO2-6">
<para>Now, to the meat of the test: we instantiate our GitHub helper class
with login credentials, then use the <literal>SaveFile</literal> function to save the
file. The last parameter is our commit message, which we will verify
later.</para>
</callout>
<callout arearefs="CO2-7">
<para>There can be times when the GitHub API has registered the commit
but the event is not yet displayed in results coming back from the
API; sleeping for a few seconds fixes this.</para>
</callout>
<callout arearefs="CO2-8">
<para>Next, we go through the steps to make an HTTP call with the OkHttp
library. We load a URL that provides us with the events for a
specified repository, events that will have the commit message when
it is a push type event. This repository happens to be public so we
don&#8217;t require authentication against the GitHub API to see this data.</para>
</callout>
<callout arearefs="CO2-9">
<para>Once we have the body of the HTTP call, we can scan it to verify
the commit message is there.</para>
</callout>
</calloutlist>
<simpara>The final steps deserve a bit more investigation. If we load the event
URL from cURL, we see data like this:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl https://api.github.com/repos/burningonup/burningonup.github.io/events
[
  {
    "id": "3244787408",
    "type": "PushEvent",
    ...
    "repo": {
      "id": 44361330,
      "name": "BurningOnUp/BurningOnUp.github.io",
      "url":
      "https://api.github.com/repos/BurningOnUp/BurningOnUp.github.io"
    },
    "payload": {
      ...
      "commits": [
        {
          "sha": "28f247973e73e3128737cab33e1000a7c281ff4b",
          "author": {
            "email": "unknown@example.com",
            "name": "Unknown"
          },
          "message": "207925 Thu Oct 15 23:06:09 PDT 2015",
          "distinct": true,
          "url":
      "https://api.github.com/repos/BurningOnUp/BurningOnUp.github.io/..."
        }
      ]
    }
...
]</programlisting>
<simpara>This is obviously JSON. We see the type is PushEvent for this event,
and it has a commit message that matches our random string format. We
could reconstitute this into a complex object structure, but scanning
the JSON as a string works for our test.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc10</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc10</primary>
</indexterm><indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc9</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc9</primary>
</indexterm></simpara>
</section>
<section xml:id="_android_ui_tests">
<title>Android UI Tests</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>UI tests for</secondary><tertiary>id=ix_chapter-07-android-asciidoc11</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc11</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm><indexterm>
<primary>UI tests</primary><secondary>id=ix_chapter-07-android-asciidoc12</secondary><tertiary>range=startofrange</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc12</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>Let&#8217;s now write a UI test. Our test will start our app, find the
username and password fields, enter in the proper username and
password text, then click the login button, and finally verify that we
have logged in by checking for the text "Logged into GitHub" in our
UI.</simpara>
<simpara><indexterm>
<primary>Espresso</primary>
</indexterm>Android uses the Espresso framework to support UI testing. We
already installed Espresso with our Gradle configuration, so we can
now write a test. Tests are written by deriving from a generic test
base class (<literal>ActivityInstrumentationTestCase2</literal>). Any public function
defined inside the test class is run as a test.</simpara>
<simpara>In Android Studio, from the "Build Variant" window, select "Android
Instrumentation Test," which will then display a test directory called
"androidTest." These are tests that will run on the emulator or
actual device. Inside the directory, make a new file called
<emphasis>MainActivityTest.java</emphasis>:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.ghru;

import android.support.test.InstrumentationRegistry; // <co xml:id="CO3-1"/>
import android.test.ActivityInstrumentationTestCase2;
import static android.support.test.espresso.Espresso.onView;
import static android.support.test.espresso.action.ViewActions.*;
import static android.support.test.espresso.assertion.ViewAssertions.matches;
import static android.support.test.espresso.matcher.ViewMatchers.*;

public class MainActivityTest  // <co xml:id="CO3-2"/>
    extends ActivityInstrumentationTestCase2&lt;MainActivity&gt; {

    public MainActivityTest() {
        super( MainActivity.class ); // <co xml:id="CO3-3"/>
    }

    public void testLogin() { // <co xml:id="CO3-4"/>
        injectInstrumentation( InstrumentationRegistry.
        getInstrumentation() ); // <co xml:id="CO3-5"/>
        MainActivity mainActivity = getActivity();
        String username = mainActivity // <co xml:id="CO3-6"/>
                .getString( R.string.github_helper_username );
        onView( withId( R.id.username ) ) // <co xml:id="CO3-7"/>
            .perform( typeText( username ) ); // <co xml:id="CO3-8"/>
        String password = mainActivity
                .getString( R.string.github_helper_password );
        onView( withId( R.id.password ) )
            .perform( typeText( password ) );
        onView( withId( R.id.login ) )
            .perform( click() );
        onView( withId( R.id.status ) ) // <co xml:id="CO3-9"/>
            .check( matches( withText( "Logged into GitHub" ) ) );


    }
}</programlisting>
<calloutlist>
<callout arearefs="CO3-1">
<para>We import the instrumentation registry (for instrumenting the
tests of our app), the base class, and matchers that will be used to
make assertions in our tests.</para>
</callout>
<callout arearefs="CO3-2">
<para>We create a test class that derives from the
<literal>ActivityInstrumentationTestCase2</literal> generic.</para>
</callout>
<callout arearefs="CO3-3">
<para>The constructor of an Espresso test implementation needs to call
the parent constructor with the class of the activity for test, in
this case <literal>MainActivity</literal>.</para>
</callout>
<callout arearefs="CO3-4">
<para>Our test verifies that we can log in to GitHub, so we name it accordingly.</para>
</callout>
<callout arearefs="CO3-5">
<para>We then load the<indexterm>
<primary>instrumentation registry</primary>
</indexterm> instrumentation registry, and also call
<literal>getActivity</literal>, which actually instantiates and starts the activity. In
many Espresso tests these two steps will occur in a function annotated as
a <literal>@Before</literal> function if they are used across multiple tests (in which
case they will be run before each test). Here to simplify our function
count we can call them inside the single test function.</para>
</callout>
<callout arearefs="CO3-6">
<para>It is never a good idea to store credentials inside of a code
repository, so we retrieve the username and  password from a resource
XML file using the <literal>getString</literal> function available using the
activity. We will show what the contents of this secret file could
look like presently.</para>
</callout>
<callout arearefs="CO3-7">
<para>Once we have the username, we can enter it in the text field in
our UI. With the<indexterm>
<primary>onView function</primary>
</indexterm> <literal>onView</literal> function we can interact with a view (for
example: a button or text field). <literal>withId</literal> <indexterm>
<primary>withId function</primary>
</indexterm>finds the view using the
resource identifier inside the XML layout files. Once we have the
view, we can then perform an action (using the <literal>perform</literal> function)
like typing in text. This chain of calls enters the GitHub username
into the first text field.</para>
</callout>
<callout arearefs="CO3-8">
<para>We then complete our interaction with the UI, entering in the
password and then clicking the login button.</para>
</callout>
<callout arearefs="CO3-9">
<para>If all is successful, we should see the text "Logged into
GitHub." Under the hood, this test will verify that we are logged in to
GitHub and display the successful result.</para>
</callout>
</calloutlist>
<simpara>To provide a username and password to our test and to keep these
credentials out of our source code, create a file called <emphasis>secrets.xml</emphasis>
inside our <emphasis>strings</emphasis> directory inside the resource folder. This file
should look like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
    &lt;string name="github_helper_login"&gt;MyUsername&lt;/string&gt;
    &lt;string name="github_helper_password"&gt;MyPwd123&lt;/string&gt;
&lt;/resources&gt;</programlisting>
<simpara>Make sure this is not checked into your source code by
adding an exception to <emphasis>.gitignore</emphasis> (the command <literal>echo
"secrets.xml" &gt;&gt; .gitgnore</literal> is a quick way to add this to your <emphasis>.gitignore</emphasis> file).<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc12</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc12</primary>
</indexterm><indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc11</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc11</primary>
</indexterm></simpara>
<simpara>Our tests will not even compile yet because we have not yet written the
other parts of the application. As such, we will skip the setup
required to run our tests within Android Studio for now.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc8</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc8</primary>
</indexterm><indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc7</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc7</primary>
</indexterm></simpara>
<simpara>Let&#8217;s now build the application itself to pass these tests.</simpara>
</section>
</section>
<section xml:id="_application_implementation">
<title>Application Implementation</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>implementation</secondary><tertiary>id=ix_chapter-07-android-asciidoc13</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc13</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>Now we can start writing some Java code for our application. Let&#8217;s
make it so our <literal>MainActivity</literal> class will inflate the layouts we
defined earlier:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.ghru;

import android.app.Activity;
import android.os.Bundle;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.EditText;
import android.widget.TextView;
import android.view.View;

public class MainActivity extends Activity
{
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView( R.layout.main);

        Button login = (Button)findViewById( R.id.login );
        login.setOnClickListener(new View.OnClickListener() { // <co xml:id="CO4-1"/>
            public void onClick(View v) {
                login(); // <co xml:id="CO4-2"/>
            }
        });
    }

    private void login() {

        setContentView(R.layout.logged_in); // <co xml:id="CO4-3"/>

        Button submit = (Button)findViewById( R.id.submit );
        submit.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) { // <co xml:id="CO4-4"/>
                doPost(); (4)
            }
        });
    }

    private void doPost() {
        TextView tv = (TextView)findViewById( R.id.post_status ); // <co xml:id="CO4-5"/>
        tv.setText( "Successful jekyll post" );
    }

}</programlisting>
<simpara>This code mocks out the functionality we will be building and shows us
exactly what the UI will look like once that code is completed.</simpara>
<calloutlist>
<callout arearefs="CO4-1">
<para>We register a click handler for our login button.</para>
</callout>
<callout arearefs="CO4-2">
<para>When the login button is clicked, we call the <literal>login()</literal> function that triggers a login flow.</para>
</callout>
<callout arearefs="CO4-3">
<para>Once we have logged in, we inflate the logged-in layout, suitable
for making a blog post.</para>
</callout>
<callout arearefs="CO4-4">
<para>We then set up another click handler for the submit button; when
clicked, we call the <literal>doPost()</literal> function.</para>
</callout>
<callout arearefs="CO4-5">
<para>Our <literal>doPost()</literal> function updates the status message at the bottom
of our application.</para>
</callout>
</calloutlist>
<simpara>Even though our code is not functionally complete, this application will
compile. This is a good time to play with this application and verify
that the UI looks appropriate. Our login form looks like <xref linkend="simple-ui-blog-posts"/>.</simpara>
<figure xml:id="simple-ui-blog-posts" role="smallereighty">
<title>A simple UI for making blog post entries</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/btwg_07in04.png"/>
</imageobject>
<textobject><phrase>btwg 07in04</phrase></textobject>
</mediaobject>
</figure>
<section xml:id="_code_to_log_in_to_github">
<title>Code to Log In to GitHub</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>code for logging in to GitHub</secondary><tertiary>id=ix_chapter-07-android-asciidoc14</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc14</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>Now we can wire in the GitHub API. Let&#8217;s first work on the<indexterm>
<primary>login</primary><secondary>for Android app</secondary>
</indexterm>
<indexterm>
<primary>for Android app</primary>
</indexterm> <literal>login()</literal>
function. Poking into the
<link xl:href="http://bit.ly/1SQ93Qf">EGit
libary reference</link>, we can write GitHub login code, which is as simple as
the following:</simpara>
<programlisting language="java" linenumbering="unnumbered">GitHubClient client = new GitHubClient();
client.setCredentials("us3r", "passw0rd");</programlisting>
<simpara>The context in which the code runs makes as much of a difference as the
code. The Android OS disallows any code from making network
connections unless it runs inside a background thread.
If you are not a Java developer already, and the thought of using
threads with Java sounds daunting, dispell your worries. The
Android SDK provides a great class for managing background tasks
called <literal>AsyncTask</literal>. This class provides several entry points into the
lifecycle of a thread that is managed by the Android OS. We implement
a class and then override two functions provided by <code><span class="keep-together">Async</span>Task</code>: the
first function is<indexterm>
<primary>doInBackground() function</primary>
</indexterm> <literal>doInBackground()</literal>, which handles operations off the
main thread (our background thread code), and the second function is
<code>onPost<span class="keep-together">Execute()</span></code>, which runs on the UI thread and allows us to update
the UI with the results of the code that ran inside <literal>doInBackground()</literal>.</simpara>
<simpara>Before we implement the login, we need to update our<indexterm>
<primary>onCreate function</primary>
</indexterm> <literal>onCreate</literal>
function of the <literal>MainActivity</literal>. Our login button handles logging in,
so let&#8217;s register a click handler on the login button that will call
the login task we will define inside our class based off <code><span class="keep-together">Async</span>Task</code>:</simpara>
<programlisting language="java" linenumbering="unnumbered">...
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        Button login = (Button)findViewById( R.id.login );
        login.setOnClickListener(new View.OnClickListener() {
                public void onClick(View v) {
                    EditText utv = (EditText)findViewById( R.id.username );
                    EditText ptv = (EditText)findViewById( R.id.password );
                    username = (String)utv.getText().toString();
                    password = (String)ptv.getText().toString(); // <co xml:id="CO5-1"/>
                    TextView status =
		      (TextView)findViewById( R.id.login_status );
                    status.setText( "Logging in, please wait..." ); // <co xml:id="CO5-2"/>
                    new LoginTask().execute( username, password );  // <co xml:id="CO5-3"/>
                }
            });
    }
...</programlisting>
<calloutlist>
<callout arearefs="CO5-1">
<para>We retrieve the username and password from our UI elements.</para>
</callout>
<callout arearefs="CO5-2">
<para>Our UI should notify the user that a login is occurring in a
background task, so we grab the status text element and update the text in it.</para>
</callout>
<callout arearefs="CO5-3">
<para>We then start the background thread process to do our login. This
syntax creates a new thread for us with the username and password as
parameters. Android will manage the lifecycle of this thread for us,
including starting the new thread separate from the main UI thread.</para>
</callout>
</calloutlist>
<simpara>Now we can implement <literal>LoginTask</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">...
    class LoginTask extends AsyncTask&lt;String, Void, Boolean&gt; {   // <co xml:id="CO6-1"/>
        @Override
            protected Boolean doInBackground(String... credentials) { // <co xml:id="CO6-2"/>
            boolean rv = false;
            UserService us = new UserService();
            us.getClient().setCredentials( credentials[0], credentials[1] );
            try {
                User user = us.getUser( credentials[0] );  // <co xml:id="CO6-3"/>
                rv = null != user;
            }
            catch( IOException ioe ) {}
            return rv;
        }

        @Override
            protected void onPostExecute(Boolean result) {
            if( result ) {
                loggedIn();  // <co xml:id="CO6-4"/>
            }
            else { // <co xml:id="CO6-5"/>
                TextView status = (TextView)findViewById( R.id.login_status );
                status.setText( "Invalid login, please check credentials" );
            }
        }
    }
...</programlisting>
<calloutlist>
<callout arearefs="CO6-1">
<para>Here we define our class derived from AsyncTask. You see three
types in the generics <indexterm>
<primary>Booleans</primary>
</indexterm><indexterm>
<primary>String type</primary>
</indexterm><indexterm>
<primary>Void type</primary>
</indexterm>signature: <literal>String</literal>, <literal>Void</literal>, and
<literal>Boolean</literal>. These are the parameters to our entry point, an
intermediate callback and the final callback, which returns control to
the calling thread. The first type allows us to parameterize our
instantiated task; we need to provide a username and password to the
background task, and the first type in the signature allows us to pass
an array of Strings. You can see in the actual function definition
that the ellipsis notation provides a way to parameterize a function
with a variable number of arguments (called varargs). Inside our
defined function we expect we will send two Strings in, and we make
sure to do that in our call.</para>
</callout>
<callout arearefs="CO6-2">
<para>Once inside the <literal>doInBackground()</literal> function, we instantiate a
<literal>UserService</literal> class, a wrapper around the GitHub API, which interacts
with the user service API call. In order to access this information,
we have to retrieve the client for this service call and provide the
client with the username and password credentials. This is the syntax
to do that.</para>
</callout>
<callout arearefs="CO6-3">
<para>We wrap the call to <literal>getUser()</literal> in a try block as the function
signature can throw an error (if the network were down, for example).
We don&#8217;t really need to retrieve information about the user using the
User object, but this call verifies that our username and password are
correct, and we store this result in our return value.
GitHub will not use the credentials you set until you make an API
call, so we need to use our credentials to access something in order
to verify that those credentials work.</para>
</callout>
<callout arearefs="CO6-4">
<para>Let&#8217;s call our function <literal>loggedIn()</literal> instead of <literal>login()</literal> to more
accurately reflect the fact that when we call this, we are already
logged in to GitHub.</para>
</callout>
<callout arearefs="CO6-5">
<para>If our login was a failure, either because of network failure, or
because our credentials were incorrect, we indicate this in the status
message. A user can retry if they wish.</para>
</callout>
</calloutlist>
<simpara><literal>loggedIn</literal> updates the UI once logging in has completed and then initiates
the post on GitHub:</simpara>
<programlisting language="java" linenumbering="unnumbered">...
    private void loggedIn() {

        setContentView(R.layout.logged_in);  // <co xml:id="CO7-1"/>

        Button submit = (Button)findViewById( R.id.submit );
        submit.setOnClickListener(new View.OnClickListener() { // <co xml:id="CO7-2"/>
            public void onClick(View v) {

                TextView status = (TextView) findViewById(R.id.login_status);
                status.setText("Logging in, please wait...");

                EditText post = (EditText) findViewById(R.id.post); // <co xml:id="CO7-3"/>
                String postContents = post.getText().toString();

                EditText repo = (EditText) findViewById(R.id.repository);
                String repoName = repo.getText().toString();

                EditText title = (EditText) findViewById(R.id.title);
                String titleText = title.getText().toString();

                doPost(repoName, titleText, postContents); // <co xml:id="CO7-4"/>
            }
        });
    }
...</programlisting>
<calloutlist>
<callout arearefs="CO7-1">
<para>Inflate the logged-in layout to reflect the fact we are now logged
in.</para>
</callout>
<callout arearefs="CO7-2">
<para>Then, install a click handler on the submit button so that when we
submit our post information, we can start the process to create the
post on GitHub.</para>
</callout>
<callout arearefs="CO7-3">
<para>We need to gather up three details the user provides: the
post body, the post title, and the repository name.</para>
</callout>
<callout arearefs="CO7-4">
<para>Using these three pieces of data, we can then call into <literal>doPost</literal>
and initiate the asynchronous task.</para>
</callout>
</calloutlist>
<simpara>Building out<indexterm>
<primary>doPost() function</primary>
</indexterm> <literal>doPost()</literal> should be more familiar now that we have
experience with AsyncTask. <literal>doPost()</literal> makes the commit inside of
GitHub, and it performs the network activity it needs to run on a
background thread:</simpara>
<programlisting language="java" linenumbering="unnumbered">...
    private void doPost( String repoName, String title, String post ) {
        new PostTask().execute( username, password, repoName, title, post );
    }

    class PostTask extends AsyncTask&lt;String, Void, Boolean&gt; {

        @Override
        protected Boolean doInBackground(String... information) { // <co xml:id="CO8-1"/>
            String login = information[0];
            String password = information[1];
            String repoName = information[2];
            String titleText = information[3];
            String postContents = information[4];

            Boolean rv = false; // <co xml:id="CO8-2"/>
            GitHubHelper ghh = new GitHubHelper(login, password); // <co xml:id="CO8-3"/>
            try {
                rv = ghh.SaveFile(repoName, titleText,
                postContents, "GhRu Update"); // <co xml:id="CO8-4"/>
            } catch (IOException ioe) { // <co xml:id="CO8-5"/>
                Log.d(ioe.getStackTrace().toString(), "GhRu");
            }
            return rv;
        }

        @Override
        protected void onPostExecute(Boolean result) {
            TextView status = (TextView) findViewById(R.id.status);
            if (result) { // <co xml:id="CO8-6"/>
                status.setText("Successful jekyll post");

                EditText post = (EditText) findViewById(R.id.post);
                post.setText("");

                EditText repo = (EditText) findViewById(R.id.repository);
                repo.setText("");

                EditText title = (EditText) findViewById(R.id.title);
                title.setText("");
            } else {
                status.setText("Post failed.");
            }
        }
    }
...</programlisting>
<calloutlist>
<callout arearefs="CO8-1">
<para>First, we retrieve the parameters we need to send off to the
GitHub API. Notice that we don&#8217;t attempt to retrieve these from the
UI. Background threads don&#8217;t have access to the Android UI functions.</para>
</callout>
<callout arearefs="CO8-2">
<para>This function returns a true or false value indicating success or
failure (using the variable <literal>rv</literal> for "return value"). We assume that
it fails unless everything we need to do inside our function works
exactly as expected, so set the expectation to false to start. The
value of our return statement is passed to the next stage in the
lifecycle of the thread, a function called <literal>onPostExecute</literal> (an
optional stage in the thread lifecycle we will use to report
status of the operation back to the user).</para>
</callout>
<callout arearefs="CO8-3">
<para>Now, we instantiate the <literal>GitHubHelper</literal> class. This instantiation
and usage should look very familiar as it is the same thing we did
inside our unit test.</para>
</callout>
<callout arearefs="CO8-4">
<para>Our helper class returns success or failure. If we have reached
this point, this is our final return value.</para>
</callout>
<callout arearefs="CO8-5">
<para>We will wrap the call to <literal>SaveFile</literal> inside a try/catch block to
make sure we handle errors; these will most likely be network errors.</para>
</callout>
<callout arearefs="CO8-6">
<para><literal>onPostExecute()</literal> is <indexterm>
<primary>onPostExecute() function</primary>
</indexterm>the function we (optionally) return to once
our background task has completed. It receives the return value from
our previous function. If we have a true value returned from
<literal>doInBackground()</literal>, then our save file succeeded and we can update the
UI of our application.</para>
</callout>
</calloutlist>
<simpara>We need to import the support classes. The JARs and classes for EGit
have already been added to our project automatically using
Gradle. Make sure you add these <literal>import</literal> statements to the top of the
file, under the other imports:</simpara>
<programlisting language="java" linenumbering="unnumbered">...
import android.view.View;
import android.os.AsyncTask;
import org.eclipse.egit.github.core.service.UserService;
import org.eclipse.egit.github.core.User;
import java.io.IOException;
...</programlisting>
<simpara>Now<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc14</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc14</primary>
</indexterm> we are ready to write the code to write data into GitHub.</simpara>
</section>
<section xml:id="_code_to_talk_to_github">
<title>Code to Talk to GitHub</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>code for putting content into GitHub</secondary><tertiary>id=ix_chapter-07-android-asciidoc15</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc15</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>Our last step is to write the code that handles putting content into GitHub.
This is not a simple function, because the GitHub API requires you
build out the structure used internally by Git. A great reference for learning more about
this structure is the free and open-source book called <link xl:href="https://progit.org/"><emphasis>Pro Git</emphasis></link> and
specifically the last chapter called
<link xl:href="http://git-scm.com/book/en/Git-Internals">Git Internals</link>.</simpara>
<simpara>In a nutshell, the GitHub
API expects you to create a Git "tree" and then place a "blob" object
into that tree. You then wrap the tree in a "commit" object and then
create that commit on GitHub using a data service wrapper. In
addition, writing a tree into GitHub requires knowing the base SHA
identifier, so you&#8217;ll see code that retrieves the last SHA in the
tree associated with our current branch. This code will work
regardless of whether we are pushing code into the master branch, or
into the gh-pages branch, so this utility class works with real
Jekyll blogs.</simpara>
<simpara>We&#8217;ll write a helper class called <literal>GitHubHelper</literal> and add a single
function that writes a file to our repository.</simpara>
<simpara>The GitHub API requires that files stored in repositories be
either Base64 encoded or UTF-8. The Apache Foundation provides a suite of tools
published to<indexterm>
<primary>Maven</primary>
</indexterm> Maven (the same software repository where we grabbed the
EGit libraries), which can do this encoding for us, and which were
already installed in our Gradle file previously (the "commons-codec" declaration).</simpara>
<simpara>We will start by defining a series of high-level functions inside
<literal>SaveFile</literal> to get through building a commit inside of GitHub. Each
function itself contains some complexity so let&#8217;s look first at the
overview of what it takes to put data into GitHub using the Git Data API:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example;

import android.util.Log;

import org.eclipse.egit.github.core.*;
import org.eclipse.egit.github.core.client.GitHubClient;
import org.eclipse.egit.github.core.service.CommitService;
import org.eclipse.egit.github.core.service.DataService;
import org.eclipse.egit.github.core.service.RepositoryService;
import org.eclipse.egit.github.core.service.UserService;
import org.apache.commons.codec.binary.Base64;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.IOException;
import java.util.*;

class GitHubHelper {

    String login;
    String password;

    GitHubHelper( String _login, String _password ) {
        login = _login;
        password = _password;
    }

    public boolean SaveFile( String _repoName,
                             String _title,
                             String _post,
                             String _commitMessage ) throws IOException {
        post = _post;
        repoName = _repoName;
        title = _title;
        commitMessage = _commitMessage;

        boolean rv = false;

        generateContent();
        createServices();
        retrieveBaseSha();

        if( null != baseCommitSha &amp;&amp; "" != baseCommitSha ) {
            createBlob();
            generateTree();
            createCommitUser();
            createCommit();
            createResource();
            updateMasterResource();
            rv = true;
        }

        return rv;
    }

...</programlisting>
<simpara>The<indexterm>
<primary>SaveFile function</primary>
</indexterm> <literal>SaveFile</literal> function goes through each step of writing data into
a repository using the GitHub API. We will walk through each of these
functions. As you can see, the <literal>SaveFile</literal> function has the same
signature as the function we call inside our unit test.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc15</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc15</primary>
</indexterm></simpara>
<simpara>Let&#8217;s implement each of the functions specified in the
GitHubHelper class.</simpara>
</section>
<section xml:id="_writing_the_blog_content">
<title>Writing the Blog Content</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>writing blog content</secondary>
</indexterm>
<indexterm>
<primary>writing blog content</primary>
</indexterm>First, we implement<indexterm>
<primary>generateContent() function</primary>
</indexterm> <literal>generateContent()</literal>. The following code snippet
shows the functions defined to generate the content we will place
into our remote Git repository stored on GitHub:</simpara>
<programlisting language="java" linenumbering="unnumbered">...
    String commitMessage; // <co xml:id="CO9-1"/>
    String postContentsWithYfm;
    String contentsBase64;
    String filename;
    String post;
    String title;
    String repoName;

    private void generateContent() { // <co xml:id="CO9-2"/>
        postContentsWithYfm =  // <co xml:id="CO9-3"/>
        "---\n" +
        "layout: post\n" +
        "published: true\n" +
        "title: '" + title + "'\n---\n\n" +
        post;
        contentsBase64 =  // <co xml:id="CO9-4"/>
        new String( Base64.encodeBase64( postContentsWithYfm.getBytes() ) );
        filename = getFilename();
    }

    private String getFilename() {
        String titleSub = title.substring( 0,  // <co xml:id="CO9-5"/>
                       post.length() &gt; 30 ?
                       30 :
                       title.length() );
        String jekyllfied = titleSub.toLowerCase() // <co xml:id="CO9-6"/>
        .replaceAll( "\\W+", "-")
        .replaceAll( "\\W+$", "" );
        SimpleDateFormat sdf = new SimpleDateFormat( "yyyy-MM-dd-" ); // <co xml:id="CO9-7"/>
        String prefix = sdf.format( new Date() );
        return "_posts/" + prefix + jekyllfied + ".md"; // <co xml:id="CO9-8"/>
    }

    String blobSha;
    Blob blob;
...</programlisting>
<simpara>You will notice many similarities between this Java code and the
Ruby code we used in <xref linkend="Jekyll"/> when generating filenames
and escaping whitespace.</simpara>
<calloutlist>
<callout arearefs="CO9-1">
<para>First, we set up several instance variables we will use when
storing the data into GitHub: the commit message, the full post
including the YAML Front Matter (YFM), the post contents encoded as
Base64, the filename, and then the three parameters we saved from the
call to <literal>SaveFile()</literal>: the post itself, the title, and the
repository name.</para>
</callout>
<callout arearefs="CO9-2">
<para>The <literal>generateContent</literal> function creates the necessary components for our
new post: the full content Base64 encoded, and the filename we will
use to store the content.</para>
</callout>
<callout arearefs="CO9-3">
<para>Here we create the YAML Front Matter (see <xref linkend="Jekyll"/> for more
details on YFM). This YAML specifies the "post" layout and sets
publishing to "true." We need to terminate the YAML with two newlines.</para>
</callout>
<callout arearefs="CO9-4">
<para>Base64 encodes the contents of the blog post
itself using a utility class found inside the Apache Commons
library. Contents inside a Git repository are stored either as UTF-8
content or Base64; we could have used UTF-8 since this is text content
but Base64 works losslessly, and you can always safely use Base64
without concerning yourself about the content.</para>
</callout>
<callout arearefs="CO9-5">
<para>Next, inside <literal>getFilename()</literal>, create the title by using the first
30 characters of the post.</para>
</callout>
<callout arearefs="CO9-6">
<para>Convert the title to lowercase, and replace the whitespace with
hyphens to get the Jekyll post title format.</para>
</callout>
<callout arearefs="CO9-7">
<para>Jekyll expects the date to be formatted as <literal>yyyy-MM-dd</literal>, so use
the java <literal>SimpleDateFormat</literal> class to help create a string of that format.</para>
</callout>
<callout arearefs="CO9-8">
<para>Finally, create the filename from all these pieces, prepending
<literal>_posts</literal> to the filename, where Jekyll expects posts to reside.</para>
</callout>
</calloutlist>
<simpara>Now we will set up the services necessary to store a commit inside GitHub.</simpara>
</section>
<section xml:id="_github_services">
<title>GitHub Services</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>and GitHub services</secondary>
</indexterm>
<indexterm>
<primary>and GitHub services</primary>
</indexterm>Next, we <indexterm>
<primary>createServices() function</primary>
</indexterm>implement <literal>createServices()</literal>. There are several services
(wrappers around Git protocols) we need to instantiate. We don&#8217;t
use them all immediately, but we will need them at various steps
during the file save process. The <literal>createServices</literal> call manages these
for us:</simpara>
<programlisting language="java" linenumbering="unnumbered">...
    RepositoryService repositoryService;
    CommitService commitService;
    DataService dataService;

    private void createServices() throws IOException {
        GitHubClient ghc = new GitHubClient();
        ghc.setCredentials( login, password );
        repositoryService = new RepositoryService( ghc );
        commitService = new CommitService( ghc );
        dataService = new DataService( ghc );
    }

...</programlisting>
<simpara>As a side note, writing things this way would allow us to specify an
enterprise endpoint instead of GitHub.com. Refer to the <xref linkend="appendix_b"/> for specific syntax on how to do this.</simpara>
</section>
<section xml:id="_the_base_sha_from_the_repository_and_branch">
<title>The Base SHA from the Repository and Branch</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>base SHA implementation</secondary>
</indexterm>
<indexterm>
<primary>base SHA implementation</primary>
</indexterm><indexterm>
<primary>SHA (secure hash algorithm)</primary>
</indexterm>Now we implement<indexterm>
<primary>directed acylic graphs (DAG)</primary>
</indexterm><indexterm>
<primary>retrieveBaseSha() function</primary>
</indexterm> <literal>retrieveBaseSha()</literal>. A Git repository is a directed
acyclic graph (DAG) and as such, (almost) every node in the graph points
to another commit (or potentially two if it is a merge commit). When
we append content to our graph, we need to determine the prior node in
that graph and attach the new node. <code>retrieve<span class="keep-together">Base</span>Sha</code> does this: it
finds the SHA hash for our last commit, a SHA hash that is
functionally an address inside our tree. To determine this address,
our application needs to have a reference to the repository, and we
use the repository service we instantiated earlier to get this
reference. Once we have the repository, we need to look inside the
correct branch: <literal>getBranch</literal> does this for us:</simpara>
<programlisting language="java" linenumbering="unnumbered">...

    private void createServices() throws IOException {
        GitHubClient ghc = new GitHubClient();
        ghc.setCredentials( login, password );
        repositoryService = new RepositoryService( ghc );
        commitService = new CommitService( ghc );
        dataService = new DataService( ghc );
    }

    Repository repository;
    RepositoryBranch theBranch;
    String baseCommitSha;
    private void retrieveBaseSha() throws IOException {
        // get some sha's from current state in git
        repository =  repositoryService.getRepository(login, repoName);
        theBranch = getBranch();
        baseCommitSha =  theBranch.getCommit().getSha();
    }

    public RepositoryBranch getBranch() throws IOException {
        List&lt;RepositoryBranch&gt; branches =
	  repositoryService.getBranches(repository);
        RepositoryBranch master = null;
        // Iterate over the branches and find gh-pages or master
        for( RepositoryBranch i : branches ) {
            String theName = i.getName().toString();
            if( theName.equalsIgnoreCase("gh-pages") ) {
                theBranch = i;
            }
            else if( theName.equalsIgnoreCase("master") ) {
                master = i;
            }
        }
        if( null == theBranch ) {
            theBranch = master;
        }
        return theBranch;
    }

...</programlisting>
<simpara>This SHA commit is very important. Without it, we cannot create a
new commit that links into our existing commit graph. In our starting
point function <literal>SaveFile()</literal> we discontinue our commit steps if the SHA
hash is not retrieved properly.</simpara>
</section>
<section xml:id="_creating_the_blob">
<title>Creating the Blob</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>blob creation for</secondary>
</indexterm>
<indexterm>
<primary>blob creation for</primary>
</indexterm>Contents inside a Git repository are stored as<indexterm>
<primary>createBlob function</primary>
</indexterm> blobs. <literal>createBlob</literal>
manages storing our content as a blob object, and then uses the
dataService to store this blob into a repository. Until we have called
<literal>dataService.createBlob</literal>, we have not actually placed the object
inside GitHub. Also, remember that blobs are not linked into our DAG
by themselves; they need to be associated with our DAG vis-a-vis a
tree and commit object, which we do next:</simpara>
<programlisting language="java" linenumbering="unnumbered">...
    String blobSha;
    Blob blob;
    private void createBlob() throws IOException {
        blob = new Blob();
        blob.setContent(contentsBase64);
        blob.setEncoding(Blob.ENCODING_BASE64);
        blobSha = dataService.createBlob(repository, blob);
    }

...</programlisting>
</section>
<section xml:id="_generating_a_tree">
<title>Generating a Tree</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>tree generation</secondary>
</indexterm>
<indexterm>
<primary>tree generation</primary>
</indexterm><indexterm>
<primary>tree (for Android app)</primary>
</indexterm>Next, we generate a tree by implementing<indexterm>
<primary>generateTree() function</primary>
</indexterm> <literal>generateTree()</literal>. A tree
wraps a blob object and provides basically a path to our object: if
you were designing an operating system, the tree would be the filename
path and the blob is an inode. Our data service manager uses a
repository name and a base SHA address, one that we retrieved earlier,
to validate that this is a valid starting point inside our
repository. Once we have a tree, we fill out the necessary tree
attributes, like tree type (blob) and
tree mode (blob), and set the SHA from the previously created blob
object along with the size. Then we store the tree into our GitHub
account using the data service object:</simpara>
<programlisting language="java" linenumbering="unnumbered">...
    Tree baseTree;
    private void generateTree() throws IOException {
        baseTree = dataService.getTree(repository, baseCommitSha);
        TreeEntry treeEntry = new TreeEntry();
        treeEntry.setPath( filename );
        treeEntry.setMode( TreeEntry.MODE_BLOB );
        treeEntry.setType( TreeEntry.TYPE_BLOB );
        treeEntry.setSha(blobSha);
        treeEntry.setSize(blob.getContent().length());
        Collection&lt;TreeEntry&gt; entries = new ArrayList&lt;TreeEntry&gt;();
        entries.add(treeEntry);
        newTree = dataService.createTree( repository, entries,
	  baseTree.getSha() );
    }

...</programlisting>
</section>
<section xml:id="_creating_the_commit">
<title>Creating the Commit</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>creating commit for</secondary>
</indexterm>
<indexterm>
<primary>creating commit for</primary>
</indexterm><indexterm>
<primary>commit (Android app example)</primary>
</indexterm>We are getting close to actually finalizing the creation of content:
next, implement<indexterm>
<primary>createCommit() function</primary>
</indexterm> <literal>createCommit()</literal>. We have created
a blob that stores the actual content, and created a tree that
stores the path to the content (more or less), but since Git is a
version control system, we also need to store information about who
wrote this object and why. A commit object stores this
information. The process should look familiar coming from the previous
steps: we create the commit and then add relevant metadata, in this case the
commit message. We also need to provide the commit user with the
commit. We then use the data service to create the commit
inside our repository in GitHub at the correct SHA address:</simpara>
<programlisting language="java" linenumbering="unnumbered">...
    CommitUser commitUser;
    private void createCommitUser() throws IOException {
        UserService us = new UserService(); // <co xml:id="CO10-1"/>
        us.getClient().setCredentials( login, password );
        commitUser = new CommitUser(); // <co xml:id="CO10-2"/>
        User user = us.getUser(); // <co xml:id="CO10-3"/>
        commitUser.setDate(new Date());
        String name = user.getName();
        if( null == name || name.isEmpty() ) { // <co xml:id="CO10-4"/>
            name = "Unknown";
        }

        commitUser.setName( name ); // <co xml:id="CO10-5"/>
        String email = user.getEmail();
        if( null == email || email.isEmpty() ) {
            email = "unknown@example.com";
        }
        commitUser.setEmail( email );
    }

    Commit newCommit;
    private void createCommit() throws IOException {
        // create commit
        Commit commit = new Commit(); // <co xml:id="CO10-6"/>
        commit.setMessage( commitMessage );
        commit.setAuthor( commitUser); // <co xml:id="CO10-7"/>
        commit.setCommitter( commitUser );
        commit.setTree( newTree );
        List&lt;Commit&gt; listOfCommits = new ArrayList&lt;Commit&gt;(); // <co xml:id="CO10-8"/>
        Commit parentCommit = new Commit();
        parentCommit.setSha(baseCommitSha);
        listOfCommits.add(parentCommit);
        commit.setParents(listOfCommits);
        newCommit = dataService.createCommit(repository, commit); // <co xml:id="CO10-9"/>
    }
...</programlisting>
<calloutlist>
<callout arearefs="CO10-1">
<para>Create a user service object. We will use this to get back user
data for the logged-in user from GitHub.</para>
</callout>
<callout arearefs="CO10-2">
<para>We then create a commit user. This will be used to annotate the
commit object (twice in fact, as we will use it for both the author
and committer).</para>
</callout>
<callout arearefs="CO10-3">
<para>Retrieve the user from the service, loading it from GitHub.</para>
</callout>
<callout arearefs="CO10-4">
<para>Now, attempt to get the name for the logged-in user. If the name
does not exist (the user has not set a name in their GitHub profile)
set the name to unknown. Then, store the name in the commit user
object.</para>
</callout>
<callout arearefs="CO10-5">
<para>Do the same process to establish the email for the commit user.</para>
</callout>
<callout arearefs="CO10-6">
<para>Now, return to the <literal>createCommit</literal> function and create a commit
object.</para>
</callout>
<callout arearefs="CO10-7">
<para>We need to use an author and committer, so pass in the commit user
we created in the <literal>createCommitUser</literal> function.</para>
</callout>
<callout arearefs="CO10-8">
<para>Next, generate a list of commits. We will only use one, but you
might recall commits can have multiple parents (a merge, for example)
and we need to specify the parent or parents. We create
the list, create a parent, and set the base SHA we determined earlier,
and then indicate in our new commit that it is the parent.</para>
</callout>
<callout arearefs="CO10-9">
<para>Finally, we create the commit using our data service object.</para>
</callout>
</calloutlist>
</section>
<section xml:id="_updating_the_master_resource">
<title>Updating the Master Resource</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>master resource updating</secondary>
</indexterm>
<indexterm>
<primary>master resource updating</primary>
</indexterm>Our final step is to take the new commit SHA and update our branch
reference to point to it:</simpara>
<programlisting language="java" linenumbering="unnumbered">...
    TypedResource commitResource;
    private void createResource() {
        commitResource = new TypedResource(); // <co xml:id="CO11-1"/>
        commitResource.setSha(newCommit.getSha());
        commitResource.setType(TypedResource.TYPE_COMMIT);
        commitResource.setUrl(newCommit.getUrl());
    }

    private void updateMasterResource() throws IOException {
        Reference reference =
                dataService.getReference(repository,
                        "heads/" + theBranch.getName() ); // <co xml:id="CO11-2"/>
        reference.setObject(commitResource);
        dataService.editReference(repository, reference, true) ; // <co xml:id="CO11-3"/>
    }
...</programlisting>
<calloutlist>
<callout arearefs="CO11-1">
<para>First, we create the new commit resource. We then associate the
new commit SHA, indicate it is a resource of commit type, and then
link it to our commit using its URL.</para>
</callout>
<callout arearefs="CO11-2">
<para>We use the data service object to get the current branch reference
from GitHub. Branch references are retrieved by appending "heads" to
the branch (we determined the branch in a previous step).</para>
</callout>
<callout arearefs="CO11-3">
<para>Finally, we update the branch reference to our new commit resource.</para>
</callout>
</calloutlist>
<simpara>This is the complete code to add data to GitHub using the Git Data
API. Good work!</simpara>
</section>
<section xml:id="_passing_all_our_tests">
<title>Passing All Our Tests</title>
<simpara><indexterm>
<primary>Android application example</primary><secondary>testing</secondary><tertiary>id=ix_chapter-07-android-asciidoc16</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc16</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm><indexterm>
<primary>testing</primary><secondary>Android app</secondary><tertiary>id=ix_chapter-07-android-asciidoc17</tertiary>
</indexterm>
<indexterm>
<primary>id=ix_chapter-07-android-asciidoc17</primary><secondary>range=startofrange</secondary>
</indexterm>
<indexterm>
<primary>range=startofrange</primary>
</indexterm>Our code is complete. Let&#8217;s make sure our tests run successfully.</simpara>
<simpara>We need to set up our test configuration to run within Android Studio.
Select the &#x201c;Build Variants&#x201d; vertical tab on the left, and in Test
Artifact select Unit Tests. Then, open the Run menu, and
select &#x201c;Edit configurations&#x201d;. Click the plus symbol, and choose
JUnit. You will be presented with space to create a unit test run
configuration. First, click &#x201c;Use classpath of module&#x201d; and
select &#x201c;app&#x201d;. Make sure the Test Kind is set to class, and then
click the selector to the right of the class field. It should
display your test class &#x201c;GitHubHelperTest.java&#x201d;. We will need to store
the username and password as environment variables, so click to add
these. Your final configuration should look like <xref linkend="creating-unit-tests"/>.</simpara>
<figure xml:id="creating-unit-tests">
<title>Creating a unit test configuration</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/btwg_07in05.png"/>
</imageobject>
<textobject><phrase>btwg 07in05</phrase></textobject>
</mediaobject>
</figure>
<simpara>Now, create the UI tests configuration: switch to "Android Instrumentation Tests" in the "Test Artifact"
of the "Build Variants" tab. Then, click the "Run" menu, and again
go to "Edit configurations". Click the plus symbol, and this
time choose "Android Tests." Choose "app" as the module, and then
select "android.support.test.runner.AndroidJUnitRunner" as the
specific instrumentation runner. You can choose whichever target
device you prefer, an emulator, or a physical device if you have
one. Give the configuration a name like "Android Test."</simpara>
<simpara>To run your tests, switch to the appropriate test artifact and then
from the "Run" menu, select "Debug" and choose the proper test
configuration. You can set breakpoints and step through code in your
test or implementation from within Android Studio.</simpara>
<simpara>I personally find it annoying to switch between build variants when I
want to run my tests, so if you prefer, you can use the command line
instead (and ignore the need to change build variants):</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ GITHUB_HELPER_USERNAME=MyUsername \
GITHUB_HELPER_PASSWORD=MyPwd123 \
./gradlew testDebugUnitTest
...
:app:mockableAndroidJar UP-TO-DATE
:app:assembleDebugUnitTest UP-TO-DATE
:app:testDebugUnitTest UP-TO-DATE

BUILD SUCCESSFUL
$ ./gradlew connectedAndroidTest
...
:app:compileDebugAndroidTestNdk UP-TO-DATE
:app:compileDebugAndroidTestSources
:app:preDexDebugAndroidTest
:app:dexDebugAndroidTest
:app:packageDebugAndroidTest
:app:assembleDebugAndroidTest
:app:connectedDebugAndroidTest

BUILD SUCCESSFUL</programlisting>
<simpara>You will see similar results with the Android Studio test runner
windows. Our tests pass and our application is complete.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc17</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc17</primary>
</indexterm><indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc16</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc16</primary>
</indexterm></simpara>
<note>
<simpara>If you want to see a more complicated version of the GitHub API on
Android, take a look at <link xl:href="https://github.com/xrd/TeddyHyde.git">Teddy
Hyde</link> (also available on the Google Play Store). Teddy Hyde uses OAuth
to log in to GitHub, and has a much richer set of features for editing
Jekyll blogs.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc13</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc13</primary>
</indexterm></simpara>
</note>
</section>
</section>
<section xml:id="_summary">
<title>Summary</title>
<simpara>This application will allow you to write into a real Jekyll blog,
adding posts, upon which GitHub will regenerate your site. This little
application manages quite a few things: formatting the filename
correctly, encoding the data for submission to GitHub, and we have a
unit test and UI test that help to verify the functionality.<indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc1</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc1</primary>
</indexterm><indexterm>
<primary>range=endofrange</primary><secondary>startref=ix_chapter-07-android-asciidoc0</secondary>
</indexterm>
<indexterm>
<primary>startref=ix_chapter-07-android-asciidoc0</primary>
</indexterm></simpara>
<simpara>In the next chapter we will use CoffeeScript to create our own chat
robot that requests pull request reviews from chat room members
using the Activity API.</simpara>
</section>
</section>
</article>